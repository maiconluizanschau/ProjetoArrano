<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfRpt</name>
    </assembly>
    <members>
        <member name="T:PdfRpt.AggregateProvider">
            <summary>
            Predefined aggregate functions provider
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IAggregateFunction">
            <summary>
            Aggregate functions contract
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IAggregateFunction.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicates starting a new group</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IAggregateFunction.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate values of each pages individually, without considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IAggregateFunction.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IAggregateFunction.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IAggregateFunction.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="M:PdfRpt.AggregateProvider.#ctor(PdfRpt.Core.Contracts.AggregateFunction)">
            <summary>
            Predefined aggregate functions provider
            </summary>
            <param name="aggregateFunction">A set of a predefined aggregate functions.</param>
        </member>
        <member name="M:PdfRpt.AggregateProvider.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.AggregateProvider.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate values of each pages individually, without considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.AggregateProvider.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.AggregateProvider.ColumnAggregateFunction">
            <summary>
            Column's AggregateFunction
            </summary>
        </member>
        <member name="P:PdfRpt.AggregateProvider.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.AggregateProvider.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Average">
            <summary>
            Average function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Average.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Average.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Average.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Average.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Average.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Empty">
            <summary>
            Empty function class.    
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Empty.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Empty.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Empty.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Empty.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Empty.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Maximum">
            <summary>
            Maximum function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Maximum.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Maximum.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Maximum.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Maximum.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Maximum.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Minimum">
            <summary>
            Minimum function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Minimum.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Minimum.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Minimum.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Minimum.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Minimum.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Aggregates"/> namespace contains some predefined Aggregate classes.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Aggregates.Numbers"/> namespace contains some predefined Numeric Aggregate classes.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.StdDev">
            <summary>
            Standard deviation function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.StdDev.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.StdDev.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.StdDev.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.StdDev.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.StdDev.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Sum">
            <summary>
            Sum function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Sum.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Sum.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Sum.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Sum.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Sum.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Aggregates.Numbers.Variance">
            <summary>
            Variance function class.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Variance.CellAdded(System.Object,System.Boolean)">
            <summary>
            Fires after adding a cell to the main table.
            </summary>
            <param name="cellDataValue">Current cell's data</param>
            <param name="isNewGroupStarted">Indicated starting a new group</param>
        </member>
        <member name="M:PdfRpt.Aggregates.Numbers.Variance.ProcessingBoundary(System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            A general method which takes a list of data and calculates its corresponding aggregate value.
            It will be used to calculate the aggregate value of each pages individually, with considering the previous pages data.
            </summary>
            <param name="columnCellsSummaryData">List of data</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Variance.DisplayFormatFormula">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Variance.GroupValue">
            <summary>
            Returns current groups' aggregate value.
            </summary>
        </member>
        <member name="P:PdfRpt.Aggregates.Numbers.Variance.OverallValue">
            <summary>
            Returns current row's aggregate value without considering the presence of the groups.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.CalendarAttributes">
            <summary>
            MonthCalendar's attributes
            </summary>
        </member>
        <member name="M:PdfRpt.Calendar.CalendarAttributes.#ctor">
            <summary>
            MonthCalendar's attributes.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.SplitRows">
            <summary>
            If true, splits rows that are forwarded to the next page but that still 
            don't fit because the row height exceeds the available page height.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.DayNamesRowBackgroundColor">
            <summary>
            BackgroundColor of the day names row.
            Its default value is WhiteSmoke.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.DescriptionHorizontalAlignment">
            <summary>
            Description text's horizontal alignment
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.Padding">
            <summary>
            MonthCalendar's TablePadding.
            Its default value is 5.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.CalendarType">
            <summary>
            Type of the in use calendar.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.CellsCustomizer">
            <summary>
            This callback will be called before adding a cell to the table. It's useful for conditional formatting.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.GradientStartColor">
            <summary>
            Gradient's Start Color. Set it to null to make it disappear.
            Its default value is LightGray.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.GradientEndColor">
            <summary>
            Gradient's End Color. Set it to null to make it disappear.
            Its default value is DarkGray.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.BorderColor">
            <summary>
            MonthCalendar's border color.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.Font">
            <summary>
            MonthCalendar's font.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.UseLongDayNamesOfWeek">
            <summary>
            Should I display "Sunday" or "Su"?
            Its default value is true.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarAttributes.RelativeColumnWidths">
            <summary>
            Relative Column Widths of the MonthCalendar.
            Its default value is new float[] { 1, 1, 1, 1, 1, 1, 1 };
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.CalendarData">
            <summary>
            MonthCalendar's Data.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarData.Month">
            <summary>
            MonthCalendar's month number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarData.Year">
            <summary>
            MonthCalendar's day number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.CalendarData.MonthDaysInfo">
            <summary>
            Associated descriptions of the MonthCalendar's days.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.CalendarNames">
            <summary>
            Default names of the Persian calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarNames.PersianMonthNames">
            <summary>
            MonthNames in the Persian calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarNames.LongGregorianDayNamesOfWeek">
            <summary>
            DaysOfWeek in the Gregorian calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarNames.ShortGregorianDayNamesOfWeek">
            <summary>
            DaysOfWeek in the Gregorian calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarNames.LongPersianDayNamesOfWeek">
            <summary>
            DaysOfWeek in the Persian calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarNames.ShortPersianDayNamesOfWeek">
            <summary>
            DaysOfWeek in the Persian calendar.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.CalendarType">
            <summary>
            Type of the in use calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarType.PersianCalendar">
            <summary>
            Persian Calendar.
            </summary>
        </member>
        <member name="F:PdfRpt.Calendar.CalendarType.GregorianCalendar">
            <summary>
            Gregorian Calendar.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.DayInfo">
            <summary>
            Defines associated description of a MonthCalendar's day.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.DayInfo.DayNumber">
            <summary>
            MonthCalendar's day number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.DayInfo.Month">
            <summary>
            MonthCalendar's month number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.DayInfo.Year">
            <summary>
            MonthCalendar's year number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.DayInfo.Description">
            <summary>
            A text to show.
            Each day can have multiple DayInfo's.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.DayInfo.ShowDescriptionInFooter">
            <summary>
            If true, the Description will be displayed in the footer of the MonthCalendar,
            instead of displaying it in the associated cell.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.DaysInfoToCalendarData">
            <summary>
            Maps list of the DayInfo's to the list of CalendarData's.
            </summary>
        </member>
        <member name="M:PdfRpt.Calendar.DaysInfoToCalendarData.MapToCalendarDataList(System.Collections.Generic.IList{PdfRpt.Calendar.DayInfo})">
            <summary>
            Maps list of the DayInfo's to the list of CalendarData's.
            </summary>
            <param name="dataRows">List of the DayInfo's</param>
            <returns>List of CalendarData's</returns>
        </member>
        <member name="T:PdfRpt.Calendar.GradientCellEvent">
            <summary>
            Draw's CellLayout
            </summary>
        </member>
        <member name="M:PdfRpt.Calendar.GradientCellEvent.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
            Draw CellLayout
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.GradientCellEvent.GradientStartColor">
            <summary>
            Gradient's Start Color. Set it to null to make it disappear.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.GradientCellEvent.GradientEndColor">
            <summary>
            Gradient's End Color. Set it to null to make it disappear.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.MonthCalendar">
            <summary>
            Draws a MonthCalendar
            </summary>
        </member>
        <member name="M:PdfRpt.Calendar.MonthCalendar.CreateMonthCalendar">
            <summary>
            Draws a MonthCalendar
            </summary>
            <returns>A PdfPTable</returns>
        </member>
        <member name="P:PdfRpt.Calendar.MonthCalendar.CalendarAttributes">
            <summary>
            MonthCalendar's attributes
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthCalendar.CalendarData">
            <summary>
            MonthCalendar's Data.
            </summary>
        </member>
        <member name="T:PdfRpt.Calendar.MonthTableCell">
            <summary>
            Represents a MonthCalendar's cell.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthTableCell.DayNumber">
            <summary>
            MonthCalendar's day number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthTableCell.Month">
            <summary>
            MonthCalendar's month number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthTableCell.Year">
            <summary>
            MonthCalendar's year number.
            It will be interpreted based on the CalendarType's value.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthTableCell.NumberCell">
            <summary>
            Each cell of the calendar is composed of NumberCell and DescriptionCell.
            </summary>
        </member>
        <member name="P:PdfRpt.Calendar.MonthTableCell.DescriptionCell">
            <summary>
            Each cell of the calendar is composed of NumberCell and DescriptionCell.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.AnnotationField">
            <summary>
            Displaying current cell's data as an annotation.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IColumnItemsTemplate">
            <summary>
            Custom template of the in use property, controls how and what should be rendered in each cell of a column.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IColumnItemsTemplate.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell.
            This method is called at the beginning of the cell's rendering.
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IColumnItemsTemplate.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering and gives you exact size
            of the cell and its raw canvases to draw texts and shapes on it.
            </summary>
            <param name="cell">The current cell. This is just for readonly purposes! Do not try to change the content of this cell, it won’t have any effect. Once the method of the cell event is triggered, the cell has already been rendered.</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IColumnItemsTemplate.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IColumnItemsTemplate.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.AnnotationField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.AnnotationField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.AnnotationField.OnPrintAnnotation">
            <summary>
            Return an AnnotationFieldData based on the passed value, 
            which is the actual row's fields values from TableDataSource and CalculatedFieldFormula.
            If you don't want to add the annotation, return null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.AnnotationField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.AnnotationField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.CheckmarkField">
            <summary>
            This item template is useful for displaying Boolean data (true/false) as checkMarks
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.CheckmarkField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.CheckmarkField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.CheckmarkField.CheckmarkFillColor">
            <summary>
            CheckMark's fill color.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.CheckmarkField.CrossSignFillColor">
            <summary>
            Fill color of the cross sign.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.CheckmarkField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.CheckmarkField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.InlineField">
            <summary>
            Defines how to display the current cell's data
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.InlineField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.InlineField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.InlineField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, 
            it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.InlineField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.InlineField.DrawOnCell">
            <summary>
            It will be called at the end of the cell's rendering.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.InlineField.RenderCell">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.MonthCalendarField">
            <summary>
            Displaying current cell's data as a calendar.
            Calendar's cell data type should be PdfRpt.Calendar.CalendarData. Use DaysInfoToCalendarData.MapToCalendarDataList to map list of the DayInfo's to the list of CalendarData's.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.MonthCalendarField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.MonthCalendarField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.MonthCalendarField.MonthCalendarFieldData">
            <summary>
            MonthCalendarField's data
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.MonthCalendarField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.MonthCalendarField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.PdfTemplateField">
            <summary>
            Using an AcroForm or a simple pdf template file as the Cells template.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.PdfTemplatePath">
            <summary>
            An AcroForm or a simple pdf template file's path.
            Only first page of the passed AcroForm makes sense here as a cell's template!
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.PdfTemplateField.OnFillAcroForm">
            <summary>
            Gives you the Row's data and AcroForm to set form.SetField method.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.SymbolField">
            <summary>
            Displaying the current cell's data as a Zapf Dingbats symbol.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.SymbolField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.SymbolField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.SymbolField.OnSelectSymbol">
            <summary>
            Choose a Zapf Dingbats symbol based on the passed value.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.SymbolField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.SymbolField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.ProgressBarField">
            <summary>
            Displaying current cell's data as text plus a ProgressBar
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ProgressBarField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ProgressBarField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ProgressBarField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ProgressBarField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ProgressBarField.ProgressBarColor">
            <summary>
            Progress bar's background color, if ProgressBarColorFormula is not specified.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ProgressBarField.ProgressBarColorFormula">
            <summary>
            Progress bar's background color based on the current row's values.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ProgressBarField.ShowPercentText">
            <summary>
            Indicates whether the percentage text should be displayed or not
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.ColumnsItemsTemplates"/> namespace contains some predefined classes for rendering ColumnsItems.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField">
            <summary>
            Displaying the current cell's data as a Wingdings symbol.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.#ctor">
            <summary>
            Displaying the current cell's data as a Wingdings symbol.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.WingdingsFontPath">
            <summary>
            Wingdings FontPath
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.OnSelectSymbol">
            <summary>
            Choose a  Wingdings symbol based on the passed value.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.WingdingsSymbolField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.XHtmlField">
            <summary>
            Using iTextSharp's HTML to PDF capabilities.
            This class uses the XmlWorker class of iTextSharp.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.XHtmlField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.XHtmlField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.XHtmlField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.XHtmlField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.XHtmlField.CssFilesPath">
            <summary>
            Optional external CSS files.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.XHtmlField.InlineCss">
            <summary>
            Optional inline CSS content.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.XHtmlField.ImagesPath">
            <summary>
            Images directory path.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AdobeZapfDingbats">
            <summary>
            Zapf Dingbats is one of the more common dingbat typefaces.
            http://en.wikipedia.org/wiki/Zapf_Dingbats
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.UpperBladeScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LowerBladeScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackTelephone">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TelephoneLocationSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TapeDrive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Airplane">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackRightPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteRightPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.VictoryHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WritingHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LowerRightPencil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Pencil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.UpperRightPencil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteNib">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackNib">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Checkmark">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyCheckmark">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MultiplicationX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyMultiplicationX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BallotX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBallotX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OutlinedGreekCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyGreekCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OpenCentreCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyOpenCentreCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LatinCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.ShadowedWhiteLatinCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OutlinedLatinCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MalteseCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.StarOfDavid">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.FourTeardropSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.FourBalloonSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyFourBalloonSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.FourClubSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackFourPointedStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteFourPointedStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.StressOutlinedWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OpenCentreBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackCentreWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OutlinedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyOutlinedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.PinwheelStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.ShadowedWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OpenCentreAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightPointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightPointedPinwheelStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.SixPointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightPointedRectilinearBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyEightPointedRectilinearBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TwelvePointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.SixteenPointedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TeardropSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OpenCentreTeardropSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyTeardropSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.SixPetalledBlackAndWhiteFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightPetalledOutlinedBlackFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledOpenCentreEightPointedStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyTeardropSpokedPinwheelAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Snowflake">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TightTrifoliateSnowflake">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyChevronSnowflake">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.Sparkle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavySparkle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BalloonSpokedAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.EightTeardropSpokedPropellerAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyEightTeardropSpokedPropellerAsterisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.ShadowedWhiteCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LowerRightDropShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.UpperRightDropShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LowerRightShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.UpperRightShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackUpPointingTriangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackDownPointingTriangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackDiamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackDiamondMinusWhiteX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.RightHalfBlackCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LightVerticalBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumVerticalBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyVerticalBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavySingleTurnedCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavySingleCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyDoubleTurnedCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyDoubleCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumLeftParenthesisOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumRightParenthesisOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumFlattenedLeftParenthesisOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumFlattenedRightParenthesisOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumLeftPointingAngleBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumRightPointingAngleBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyLeftPointingAngleQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyRightPointingAngleQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyLeftPointingAngleBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyRightPointingAngleBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LightLeftTortoiseshellBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LightRightTortoiseshellBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumLeftCurlyBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.MediumRightCurlyBracketOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CurvedStemParagraphSignOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyExclamationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyHeartExclamationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackheart">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.RotatedHeavyBlackheartBullet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.FloralHeart">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.RotatedFloralHeartBullet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackClubSuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackDiamondSuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackheartSuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackSpadeSuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatCircledSansSerifNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DingbatNegativeCircledSansSerifNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyWideHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.RightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LeftRightArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.UpDownArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavySoutheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyNortheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DraftingPointRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyRoundTippedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TriangleHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyTriangleHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.DashedTriangleHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyDashedTriangleHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.ThreeDTopLightedRightwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.ThreeDBottomLightedRightwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackRightwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackCurvedDownwardsAndRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackCurvedUpwardsAndRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.SquatBlackRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyConcavePointedBlackRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.RightShadedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.LeftShadedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BackTiltedShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.FrontTiltedShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyLowerRightShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyUpperRightShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.NotchedLowerRightShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.NotchedUpperRightShadowedWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.CircledHeavyWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WhiteFeatheredRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackFeatheredSoutheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackFeatheredRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.BlackFeatheredNortheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackFeatheredSoutheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackFeatheredRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyBlackFeatheredNortheastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.TeardropBarbedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyTeardropShankedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.WedgeTailedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.HeavyWedgeTailedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AdobeZapfDingbats.OpenOutlinedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AggregateFunction">
            <summary>
            A set of a predefined aggregate functions.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Average">
            <summary>
            Average function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Maximum">
            <summary>
            Maximum function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Minimum">
            <summary>
            Minimum function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.StdDev">
            <summary>
            Standard deviation function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Sum">
            <summary>
            Sum function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Variance">
            <summary>
            Variance function.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AggregateFunction.Empty">
            <summary>
            Prints empty cell.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AggregateValuePosition">
            <summary>
            Summary cell's alignment
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AggregateValuePosition.HorizontalAlignment">
            <summary>
            Sets summary cell's value horizontal alignment
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AggregateValuePosition.X">
            <summary>
            Horizontal position.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AnnotationFieldData">
            <summary>
            Defines a PdfAnnotation data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AnnotationFieldData.Icon">
            <summary>
            The icon that should be used.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AnnotationFieldData.Title">
            <summary>
            A title for the annotations.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AnnotationFieldData.Text">
            <summary>
            The content of the text annotation.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AttachmentFile">
            <summary>
            Attachment File Info.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AttachmentFile.Content">
            <summary>
            Attachment File's Content.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AttachmentFile.FileName">
            <summary>
            Attachment File's Name.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.FlushType">
            <summary>
            How to flush an in memory PDF file.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.FlushType.Attachment">
            <summary>
            Content-Disposition: attachment. Force download and display download popup.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.FlushType.Inline">
            <summary>
            Content-Disposition: inline. Display PDF in the browser.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.FooterBasicProperties">
            <summary>
            Properties of pages footers
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.HeaderBasicProperties">
            <summary>
            Properties of pages and groups headerds 
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.HeaderBasicProperties.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.TableWidthPercentage">
            <summary>
            Width percentage of the table. Its default value is 100.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.SpacingBeforeTable">
            <summary>
            Spacing before each table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.ShowBorder">
            <summary>
            Adds a border to an existing PdfGrid.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.BorderColor">
            <summary>
            Border's Color. Its default value is BaseColor.LIGHT_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.RunDirection">
            <summary>
            A Possible run direction value, left-to-right or right-to-left.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.HorizontalAlignment">
            <summary>
            Cells horizontal alignment value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderBasicProperties.PdfFont">
            <summary>
            Message's font.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.FooterBasicProperties.#ctor">
            <summary>
            Properties of pages footers
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterBasicProperties.TotalPagesCountTemplateHeight">
            <summary>
            Height of the template.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterBasicProperties.TotalPagesCountTemplateWidth">
            <summary>
            Width of the template.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.FooterData">
            <summary>
            Footer callbacks data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterData.CurrentPageNumber">
            <summary>
            Current Page Number.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterData.PdfDoc">
            <summary>
            Pdf Document Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterData.PdfWriter">
            <summary>
            PdfWriter Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterData.SummaryData">
            <summary>
            Holds summary info of the main table's rows and cells.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FooterData.TotalPagesCountImage">
            <summary>
            This image will be filled with the total pages number of the document
            at the end of the process.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.HeaderData">
            <summary>
            Header callbacks data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderData.PdfDoc">
            <summary>
            Pdf Document Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderData.PdfWriter">
            <summary>
            PdfWriter Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderData.NewGroupInfo">
            <summary>
            Cells of the new group's first row. It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeaderData.SummaryData">
            <summary>
            Holds summary info of the main table's rows and cells.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.HorizontalStackPanelPreferences">
            <summary>
            If MainTableType is set to HorizontalStackPanel, here you can define its preferences such as
            number of columns per row.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HorizontalStackPanelPreferences.ColumnsPerRow">
            <summary>
            Number of columns per row.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IDataExporter">
            <summary>
            DataExporters contract
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IDataExporter.DocumentOpened(System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="pdfColumnsAttributes">Sets columns definitions of the current report at startup.</param>
            <param name="documentPreferences">Document settings.</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IDataExporter.RowAdded(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Boolean)">
            <summary>
            Fires after adding a row to the main table.
            </summary>
            <param name="cellsData">cells data</param>
            <param name="isNewGroupStarted">Indicates starting a new group</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IDataExporter.ClosingDocument">
            <summary>
            Fires before closing the document
            </summary>
            <returns>returns the final produced file's stream data</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IDataExporter.FileName">
            <summary>
            Sets or gets the produced file's name.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IDataExporter.Description">
            <summary>
            Sets or gets the produced file's description.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ImportedPageInfo">
            <summary>
            To add a new content to the imported page, use the PageStamp object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.CurrentPageNumber">
            <summary>
            Current page's number.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.FileNumber">
            <summary>
            Current file's number.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.ImportedPage">
            <summary>
            Current imported page's data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.PageSize">
            <summary>
            Current page's size.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.PdfDocument">
            <summary>
            Final PdfDocument object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.Reader">
            <summary>
            Current PdfReader Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.Stamp">
            <summary>
            Allows adding the new content to a PdfImportedPage.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ImportedPageInfo.TotalNumberOfPages">
            <summary>
            Total Number Of all PDF files pages.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.InlineFieldData">
            <summary>
            Custom IColumnItemsTemplate's data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.BasicProperties">
            <summary>
            Table's Cells Definitions.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values. It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.Attributes">
            <summary>
            Important main table's cells attributes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.Cell">
            <summary>
            The current cell at the end of the cell's rendering.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.Position">
            <summary>
            The coordinates of the cell.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.InlineFieldData.Canvases">
            <summary>
            An array of PdfContentByte to add text or graphics.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfGrid">
            <summary>
            PdfGrid represents the iTextSharp.text.pdf.PdfPTable class.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.PdfGrid.#ctor(System.Single[])">
            <summary>
            Constructs a PdfPTable with the relative column widths.
            </summary>
            <param name="relativeWidths">the relative column widths</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.PdfGrid.#ctor(System.Int32)">
            <summary>
            Constructs a PdfPTable with numColumns columns.
            </summary>
            <param name="numColumns">the number of columns</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.PdfGrid.#ctor(iTextSharp.text.pdf.PdfPTable)">
            <summary>
            Constructs a copy of a PdfPTable.
            </summary>
            <param name="table">the PdfPTableto be copied</param>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfGrid.RelativeWidths">
            <summary>
            The relative column widths.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfPageSize">
            <summary>
            Represents the most common paper sizes.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Letter">
            <summary>
            This is the letter format (612*792)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Note">
            <summary>
            This is the note format (540*720)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Legal">
            <summary>
            This is the legal format (612*1008)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Tabloid">
            <summary>
            This is the tabloid format (792*1224)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Executive">
            <summary>
            This is the executive format (522*756)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Postcard">
            <summary>
            This is the postcard format (283*416)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A0">
            <summary>
            This is the a0 format (2384*3370)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A1">
            <summary>
            This is the a1 format (1684*2384)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A2">
            <summary>
            This is the a2 format (1191*1684)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A3">
            <summary>
            This is the a3 format (842*1191)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A4">
            <summary>
            This is the a4 format (595*842)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A5">
            <summary>
            This is the a5 format (420*595)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A6">
            <summary>
            This is the a6 format (297*420)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A7">
            <summary>
            This is the a7 format (210*297) 
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A8">
            <summary>
            This is the a8 format (148*210)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A9">
            <summary>
            This is the a9 format (105*148)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.A10">
            <summary>
            This is the a10 format (73*105)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B0">
            <summary>
            This is the b0 format (2834*4008)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B1">
            <summary>
            This is the b1 format (2004*2834)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B2">
            <summary>
            This is the b2 format (1417*2004)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B3">
            <summary>
            This is the b3 format (1000*1417)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B4">
            <summary>
            This is the b4 format (708*1000)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B5">
            <summary>
            This is the b5 format (498*708)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B6">
            <summary>
            This is the b6 format (354*498)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B7">
            <summary>
            This is the b7 format (249*354)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B8">
            <summary>
            This is the b8 format (175*249)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B9">
            <summary>
            This is the b9 format (124*175)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.B10">
            <summary>
            This is the b10 format (87*124)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ArchE">
            <summary>
            This is the archE format (2592*3456)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ArchD">
            <summary>
            This is the archD format (1728*2592)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ArchC">
            <summary>
            This is the archC format (1296*1728)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ArchB">
            <summary>
            This is the archB format (864*1296)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ArchA">
            <summary>
            This is the archA format (648*864)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.AmericanFoolscap">
            <summary>
            This is the American Foolscap format (612*936)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.EuropeanFoolscap">
            <summary>
            This is the European Foolscap format (648*936)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.HalfLetter">
            <summary>
            This is the halfletter format (396*612)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Size11X17">
            <summary>
            This is the 11x17 format (792*1224)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ID1">
            <summary>
            This is the ISO 7810 ID-1 format (242.65f*153)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ID2">
            <summary>
            This is the ISO 7810 ID-2 format (A7 rotated) (297*210)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.ID3">
            <summary>
            This is the ISO 7810 ID-3 format (B7 rotated) (354*249)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.Ledger">
            <summary>
            This is the ledger format (1224*792)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.CrownQuarto">
            <summary>
            This is the Crown Quarto format (535*697)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.LargeCrownQuarto">
            <summary>
            This is the Large Crown Quarto format (569*731)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.DemyQuarto">
            <summary>
            This is the Demy Quarto format (620*782)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.RoyalQuarto">
            <summary>
            This is the Royal Quarto format (671*884)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.CrownOctavo">
            <summary>
            This is the Crown Octavo format (348*527)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.LargeCrownOctavo">
            <summary>
            This is the Large Crown Octavo format (365*561)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.DemyOctavo">
            <summary>
            This is the Demy Octavo format (391*612)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.RoyalOctavo">
            <summary>
            This is the Royal Octavo format (442*663)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.SmallPaperback">
            <summary>
            This is the small paperback format (314*504)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.PengiunSmallPaperback">
            <summary>
            This is the Pengiun small paperback format (314*513)
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfPageSize.PenguinLargePaparback">
            <summary>
            This is the Penguin large paparback format (365*561)
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.TableType">
            <summary>
            Possible values of the TableType
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableType.NormalTable">
            <summary>
            A normal PdfGrid.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableType.HorizontalStackPanel">
            <summary>
            Horizontal StackPanel writes the values of data source based on PdfRunDirection from ltr or rtl of each row.
            For creating vertical StackPanel, just use the MainTablePreferences.MultipleColumnsPerPage method.
            All columns and properties of an object will create a single cell here.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.Wingdings">
            <summary>
            Wingdings character set.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Pencil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.UpperBladeScissors">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EyeGlasses">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Bell">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.OpenBook">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Candle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackTelephone">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.TelephoneLocationSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Envelope">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EnvelopeWithAddressAndStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClosedMailboxWithLoweredFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClosedMailboxWithRaisedFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.OpenMailboxWithRaisedFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.OpenMailboxWithLoweredFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.FileFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.OpenFileFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.PageFacingUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.PrintedPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.StackOfPrintedPages">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.FilingCabinet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Hourglass">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Keyboard">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Mouse">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Trackball">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.PersonalComputer">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HardDisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.FloppyDisk">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.FloppyDisk2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.TapeDrive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WritingHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WritingLeftHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.VictoryHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.OKHandSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThumbsUpSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThumbsDownSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteLeftPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteRightPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteUpPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteDownPointingIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.RaisedHand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteSmilingFace">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.NeutralFace">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteFrowningFace">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Bomb">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SkullAndCrossbones">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.TriangularFlagOnPost">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Airplane">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteSunWithRays">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Droplet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Snowflake">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteLatinCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ShadowedWhiteLatinCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CelticCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.MalteseCross">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.StarOfDavid">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.StarAndCrescent">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.YinYang">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DevanagariOm">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WheelOfDharma">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Aries">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Taurus">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Gemini">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Cancer">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Leo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Virgo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Libra">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Scorpio">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Sagittarius">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Capricorn">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Aquarius">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Pisces">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.AmpersandIitalicLowercase">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.AmpersandIitalic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ShadowedWhiteCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BoldWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LowerRightShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.UpperRightShadowedWhiteSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackMediumLozenge">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackLozenge">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackDiamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackDiamondMinusWhiteX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackMediumDiamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.XInARectangleBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.AplFunctionalSymbolQuadUpCaret">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.PlaceOfInterestSign">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackFlorette">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyDoubleTurnedCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyDoubleCommaQuotationMarkOrnament">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteVerticalRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.NegativeCircledDigitZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitTwo">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitThree">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitFour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitFive">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitSix">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitSeven">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitEight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledDigitNine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DingbatNegativeCircledNumberTen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BudAndLeafNorthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BudAndLeafNorthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BudAndLeafSouthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BudAndLeafSouthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BoldVineLeafNorthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BoldVineLeafNorthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BoldVineLeafSouthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BoldVineLeafSouthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.MiddleDot">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Bullet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackSmallSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyLargeCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ExtraBoldWhiteCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Fisheye">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.Bullseye">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.UpperRightShadowedWhiteCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackSmallSquare2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteMediumSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackThreePointedStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackFourPointedStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SixPointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EightPointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.TwelvePointedBlackStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EightPointedPinwheelStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SquareRegisterMark">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.PositionIndicator">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteConcaveSidedDiamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SquareLozenge">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.QuestionMarkInWhiteDiamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ShadowedWhiteStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceOneOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceTwoOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceThreeOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceFourOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceFiveOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceSixOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceSevenOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceEightOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceNineOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceTenOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceElevenOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ClockFaceTwelveOclock">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingDownwardsThenCurvingLeftwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingDownwardsThenCurvingRightwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingUpwardsThenCurvingLeftwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingUpwardsThenCurvingRightwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingLeftwardsThenCurvingUpwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingRightwardsThenCurvingUpwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingLeftwardsThenCurvingDownwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteArrowPointingRightwardsThenCurvingDownwards">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.QuiltSquare2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BlackQuiltSquare2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafCounterclockwiseSouthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafCounterclockwiseNorthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafCounterclockwiseSouthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafCounterclockwiseNorthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafNorthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafSouthWest">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafNorthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeafSouthEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EraseToTheLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.EraseToTheRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThreeDTopLightedLeftwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThreeDTopLightedRightwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThreeDRightLightedUpwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.ThreeDLeftLightedDownwardsArrowhead">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledHeavyWhiteLeftwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledHeavyWhiteRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledHeavyWhiteUpwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CircledHeavyWhiteDownwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedLeftwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedUpwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedDownwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedNorthWestArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedNorthEastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedSouthWestArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WideHeadedSouthEastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedLeftwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedRightwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedUpwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedDownwardsArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedNorthWestArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedNorthEastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedSouthWestArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.HeavyWideHeadedSouthEastArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeftwardsWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.RightwardsWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.UpwardsWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.DownwardsWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.LeftRightWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.UpDownWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.NorthEastWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.NorthWestWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SouthWestWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.SouthEastWhiteArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WhiteSmallSquare">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BallotX">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.CheckMark">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BallotBoxWithXfont">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.BallotBoxWithCheckfont">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.Wingdings.WindowsLogo">
            <summary>
            
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.XFooterBasicProperties">
            <summary>
            Properties of pages footers
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.XHeaderBasicProperties">
            <summary>
            Properties of pages and groups headerds 
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.XHeaderBasicProperties.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.TableWidthPercentage">
            <summary>
            Width percentage of the table. Its default value is 100.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.SpacingBeforeTable">
            <summary>
            Spacing before each table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.ShowBorder">
            <summary>
            Adds a border to an existing PdfGrid.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.BorderColor">
            <summary>
            Border's Color. Its default value is BaseColor.LIGHT_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.RunDirection">
            <summary>
            A Possible run direction value, left-to-right or right-to-left.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.CssFilesPath">
            <summary>
            Optional external CSS files.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.InlineCss">
            <summary>
            Optional inline CSS content.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.ImagesPath">
            <summary>
            Optional images directory path.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XHeaderBasicProperties.PdfFont">
            <summary>
            Message's font.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.XFooterBasicProperties.#ctor">
            <summary>
            Properties of pages footers
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XFooterBasicProperties.TotalPagesCountTemplateHeight">
            <summary>
            Height of the template.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.XFooterBasicProperties.TotalPagesCountTemplateWidth">
            <summary>
            Width of the template.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.ColorExtensions">
            <summary>
            Some helper methods for working with colors
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ColorExtensions.ToBaseColor(System.Drawing.Color)">
            <summary>
            Converts System.Drawing.Color to BaseColor
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.ExtractPdfFileAttachments">
            <summary>
            Extracting all of the document level attachments and file attachment annotations of a given PDF file.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExtractPdfFileAttachments.PerformExtraction(System.IO.Stream)">
            <summary>
            Start extracting all of the document level attachments and file attachment annotations of a given PDF file.
            </summary>
            <param name="pdfFileStream">Input file's stream.</param>
            <returns>List of the extracted attachments.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExtractPdfFileAttachments.PerformExtraction(System.String)">
            <summary>
            Start extracting all of the document level attachments and file attachment annotations of a given PDF file.
            </summary>
            <param name="pdfFilePath">Input file's path.</param>
            <returns>List of the extracted attachments.</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.GetterInfo">
            <summary>
            Getter method's info.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.GetterInfo.Name">
            <summary>
            Property/Field's name.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.GetterInfo.GetterFunc">
            <summary>
            Property/Field's Getter method.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.GetterInfo.PropertyType">
            <summary>
            Property/Field's Type.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.GetterInfo.MemberInfo">
            <summary>
            Obtains information about the attributes of a member and provides access.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.FastReflection">
            <summary>
            Fast property access, using Reflection.Emit.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.FastReflection.Instance">
            <summary>
            Singleton instance of FastReflection.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.FastReflection.GetGetterDelegates(System.Type)">
            <summary>
            Fast property access, using Reflection.Emit.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.Hash">
            <summary>
            Hash class contains some useful hashing methods such as MD5.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.Hash.MD5Hash(System.Byte[])">
            <summary>
            Calculates the MD5 of a byte array.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.Hash.MD5Hash(System.String)">
            <summary>
            Calculates the MD5 of the input string.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.ImageProvider">
            <summary>
            XmlWorker's Images Path Provider class.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.ImageProvider.GetImageRootPath">
            <summary>
            returns images directory path.
            </summary>        
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.ImageProvider.ImagesPath">
            <summary>
            Images directory path.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.RtlElementsCollector">
            <summary>
            XMLWorker does not support RTL by default. so we need to collect the parsed elements first and
            then wrap them with a RTL table.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.RtlElementsCollector.#ctor">
            <summary>
            XMLWorker does not support RTL by default. so we need to collect the parsed elements first and
            then wrap them with a RTL table.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.RtlElementsCollector.Add(iTextSharp.tool.xml.IWritable)">
            <summary>
            Intercepting the XMLWorker's parser and collecting its interpreted pdf elements.
            </summary>        
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.RtlElementsCollector.fixNestedTablesRunDirection(iTextSharp.text.IElement)">
            <summary>
            It's necessary to fix the RTL of the final PdfPTables.
            </summary>        
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.RtlElementsCollector.Paragraph">
            <summary>
            This Paragraph contains all of the parsed elements.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.SimpleElementsCollector">
            <summary>
            Collects XMLWorker's parsed elements.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.SimpleElementsCollector.#ctor">
            <summary>
            Collects XMLWorker's parsed elements.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.SimpleElementsCollector.Add(iTextSharp.tool.xml.IWritable)">
            <summary>
            Intercepting the XMLWorker's parser and collecting its interpreted pdf elements.
            </summary>        
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.SimpleElementsCollector.Paragraph">
            <summary>
            This Paragraph contains all of the parsed elements.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.TotalPagesNumberXmlWorkerProcessor">
            <summary>
            Custom TotalPagesNumber tag processor.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.TotalPagesNumberXmlWorkerProcessor.#ctor(iTextSharp.text.Image)">
            <summary>
            ctor.
            </summary>        
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.TotalPagesNumberXmlWorkerProcessor.End(iTextSharp.tool.xml.IWorkerContext,iTextSharp.tool.xml.Tag,System.Collections.Generic.IList{iTextSharp.text.IElement})">
            <summary>
            This method is called when a closing tag has been encountered of the
            ITagProcessor implementation that is mapped to the tag.
            </summary>
            <param name="ctx"></param>
            <param name="tag">the tag encountered</param>
            <param name="currentContent">
            a list of content possibly created by TagProcessing of inner tags, and by startElement and 
            content methods of this ITagProcessor
            </param>
            <returns>the resulting element to add to the document or a content stack.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.TotalPagesNumberXmlWorkerProcessor.IsStackOwner">
            <summary>
            true if the tag implementation must keep it's own currentContent stack.
            </summary>        
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.UnicodeFontProvider">
            <summary>
            XmlWorker's Unicode Font Provider class.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.UnicodeFontProvider.#ctor(iTextSharp.text.Font)">
            <summary>
            XmlWorker's Unicode Font Provider class.
            </summary>
            <param name="defaultFont">a missing fonts provider</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.UnicodeFontProvider.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
            Provides a font with BaseFont.IDENTITY_H encoding.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerUtils">
            <summary>
            XMLWorker's helper methods.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerUtils.GetCssFile(System.String)">
            <summary>
            returns a css file
            </summary>
            <param name="filePath">css file's path</param>
            <returns>XMLWorker CSS file</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.MergePdfDocuments">
            <summary>
            Merge multiple PDF files into one PDF file.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.MergePdfDocuments.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.MergePdfDocuments.PerformMerge">
            <summary>
            Start merging multiple PDF files into one PDF file.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.MergePdfDocuments.AttachmentsBookmarkLabel">
            <summary>
            MergePdfDocuments adds a link to the attachments panel of Adobe reader automatically and
            AttachmentsBookmarkLabel sets its display label.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.MergePdfDocuments.InputFileStreams">
            <summary>
            Input files list to merge.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.MergePdfDocuments.DocumentMetadata">
            <summary>
            Defines metadata information of the Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.MergePdfDocuments.OutputFileStream">
            <summary>
            Merged file's stream.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.MergePdfDocuments.WriterCustomizer">
            <summary>
            WriterCustomizer allows writing additional information to the final merged file.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.PdfPageSizeToRectangle">
            <summary>
            This class converts the most common paper sizes to their iTextSharp.text.Rectangle equivalents.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfPageSizeToRectangle.ToRectangle(PdfRpt.Core.Contracts.PdfPageSize)">
            <summary>
            Converts the most common paper sizes to their iTextSharp.text.Rectangle equivalents.
            </summary>
            <param name="pageSize">page size</param>
            <returns>Rectangle</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.PersianNumber">
            <summary>
            English numbers to Persian numbers converter and vice versa.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToPersianNumbers(System.Int32)">
            <summary>
            Converts English digits of a given string to their equivalent Persian digits.
            </summary>
            <param name="number">English number</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToPersianNumbers(System.Int64)">
            <summary>
            Converts English digits of a given string to their equivalent Persian digits.
            </summary>
            <param name="number">English number</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToPersianNumbers(System.Nullable{System.Int32})">
            <summary>
            Converts English digits of a given string to their equivalent Persian digits.
            </summary>
            <param name="number">English number</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToPersianNumbers(System.Nullable{System.Int64})">
            <summary>
            Converts English digits of a given string to their equivalent Persian digits.
            </summary>
            <param name="number">English number</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToPersianNumbers(System.String)">
            <summary>
            Converts English digits of a given string to their equivalent Persian digits.
            </summary>
            <param name="data">English number</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianNumber.ToEnglishNumbers(System.String)">
            <summary>
            Converts Persian digits of a given string to their equivalent English digits.
            </summary>
            <param name="data">Persian number</param>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.RunDirectionHelper">
            <summary>
            Indicates whether the input text contains rtl data or not
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.RunDirectionHelper.ContainsRtlText(System.String)">
            <summary>
            Indicates whether the input text contains rtl data or not
            </summary>
            <param name="data">input text</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.RunDirectionHelper.GetRunDirection(System.String)">
            <summary>
            Determines the text direction based on the ContainsRtlText method's result.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.SoftHttpContext">
            <summary>
            This class has not a hard reference to the System.Web assembly. 
            So it can be called from the `.NET client profile` library.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.SoftHttpContext.FlushInBrowser(System.String,System.Byte[],PdfRpt.Core.Contracts.FlushType)">
            <summary>
            Flushes the fileData into the user's browser.
            It's designed for the ASP.NET Applications.
            </summary>
            <param name="fileName">name of the file</param>
            <param name="fileData">byte array containing the file's data</param>
            <param name="flushType">How to flush an in memory PDF file</param>
        </member>
        <member name="T:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper">
            <summary>
            Using iTextSharp's HTML to PDF capabilities.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.RenderHtml">
            <summary>
            Using iTextSharp's HTML to PDF capabilities.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.Html">
            <summary>
            The HTML to show.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.RunDirection">
            <summary>
            Run direction, left-to-right or right-to-left.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.CssFilesPath">
            <summary>
            Optional external CSS files.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.InlineCss">
            <summary>
            Optional inline CSS content.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.ImagesPath">
            <summary>
            Optional images directory path.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.PdfElement">
            <summary>
            Custom HTML Element.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HtmlToPdf.XmlWorkerHelper.DefaultFont">
            <summary>
            Html document's default font.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.FixedHeightAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.FixedHeightAttribute.#ctor(System.Single)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>        
            <param name="fixedHeight">
            Height of each row will be calculated automatically based on its content. 
            Also you can set the FixedHeight to define the height yourself.
            In this case the overflowed text with be trimmed. 
            Set FixedHeight to zero (its default value) to ignore this setting. 
            </param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.FixedHeightAttribute.FixedHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            Also you can set the FixedHeight to define the height yourself.
            In this case the overflowed text with be trimmed. 
            Set FixedHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.MinimumHeightAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.MinimumHeightAttribute.#ctor(System.Single)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="minimumHeight">
            Height of each row will be calculated automatically based on its content. 
            To assure a certain cell height, without losing any content, you can set the MinimumHeight.
            Set MinimumHeight to zero (its default value) to ignore this setting.
            </param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.MinimumHeightAttribute.MinimumHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            To assure a certain cell height, without losing any content, you can set the MinimumHeight.
            Set MinimumHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="T:PdfRpt.DataSources.GenericDataReaderDataSource">
            <summary>
            Using the data provider factory classes to develop a pluggable data layer 
            that is independent of database type and ADO.NET data provider. 
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IDataSource">
            <summary>
            PdfRpt's DataSource Contract
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.DataSources.GenericDataReaderDataSource.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="providerName">Invariant name of a provider. Supports the ADO.NET Factory classes to allow you the ability to dynamically load the provider at runtime</param>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.DataSources.GenericDataReaderDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.FluentInterface.AggregateFunctionBuilder">
            <summary>
            Aggregate Function Builder Class
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.AggregateFunctionBuilder.CustomAggregateFunction(PdfRpt.Core.Contracts.IAggregateFunction)">
            <summary>
            Custom Aggregate Function
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.AggregateFunctionBuilder.DisplayFormatFormula(System.Func{System.Object,System.String})">
            <summary>
            Fires before rendering of this cell.
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.AggregateFunctionBuilder.NumericAggregateFunction(PdfRpt.Core.Contracts.AggregateFunction)">
            <summary>
            A set of a predefined aggregate functions.
            It only works with numbers. If you want to apply it on other data types, you need to create your own AggregateFunction by implementing the IAggregateFunc.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.AggregateFunctionBuilder.AggregateFunction">
            <summary>
            Gets the Aggregate Function
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder">
            <summary>
            Column Items Template Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.BasicProperties(PdfRpt.Core.Contracts.CellBasicProperties)">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.CustomTemplate(PdfRpt.Core.Contracts.IColumnItemsTemplate)">
            <summary>
            Custom template of the in use property, 
            controls how and what should be rendered in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.DisplayFormatFormula(System.Func{System.Object,System.String})">
            <summary>
            Fires before each cell of this column is being rendered as a string. 
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ConditionalFormatFormula(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.CellBasicProperties})">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.Annotation(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.AnnotationFieldData})">
            <summary>
            Displaying current cell's data as an annotation.
            </summary>
            <param name="onPrintAnnotation">Return an AnnotationFieldData based on the passed value, which is the actual row's fields values from TableDataSource and CalculatedFieldFormula. If you don't want to add the annotation, return null.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.Barcode(iTextSharp.text.pdf.Barcode)">
            <summary>
            Displaying current cell's data as a Barcode.
            </summary>
            <param name="value">An instance of iTextSharp.text.pdf.BarcodeXYZ</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ByteArrayImage(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displaying current cell's data as an Image.
            </summary>
            <param name="defaultImageFilePath">Default image will be used in case of null images</param>
            <param name="fitImages">Set fitImages to true to fit the image to the cell</param>    
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.Checkmark(System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
            This item template is useful for displaying Boolean data (true/false) as checkMarks
            </summary>
            <param name="checkmarkFillColor">Checkmark's fill color.</param>
            <param name="crossSignFillColor">Fill color of the cross sign.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.XHtml(System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Using iTextSharp's HTML to PDF capabilities.
            This method uses the XmlWorker class of iTextSharp.
            </summary>
            <param name="cssFilesPath">Optional external CSS files.</param>
            <param name="inlineCss">Optional inline CSS content.</param>
            <param name="imagesRootPath">Optional images directory path.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.InlineField(System.Action{PdfRpt.FluentInterface.InlineFieldBuilder})">
            <summary>
            Defines how to display the current cell's data.
            </summary>
            <param name="inlineFieldBuilder">Defines how to display the current cell's data.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.Hyperlink(System.Drawing.Color,System.Boolean,System.String,System.String)">
            <summary>
            Displaying current cell's data as a hyperlink
            </summary>
            <param name="foreColor"></param>
            <param name="fontUnderline"></param>
            <param name="textPropertyName">If you don't set TextPropertyName, current cell's text will be used as hyperlink's text.</param>
            <param name="navigationUrlPropertyName">If you don't set NavigationUrlPropertyName, current cell's text will be used as hyperlink's target url.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ImageFilePath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displaying current cell's data as an Image. It's assumed that this data point to the physical image's path on the disk.
            </summary>        
            <param name="defaultImageFilePath">Default image will be used in case of missing images</param>
            <param name="fitImages">Set fitImages to true to fit the image to the cell</param>    
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.PdfTemplate(System.String,System.Action{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},iTextSharp.text.pdf.AcroFields,iTextSharp.text.pdf.PdfStamper})">
            <summary>
            Using an AcroForm or a simple pdf template file as the Cells template.
            </summary>
            <param name="pdfTemplatePath">An AcroForm or a simple pdf template file's path. Only first page of the passed AcroForm makes sense here as a cell's template!</param>
            <param name="onFillAcroForm">Gives you the Row's data and AcroForm to set form.SetField method. It can be null.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ProgressBar(System.Drawing.Color,System.Boolean)">
            <summary>
            Displaying current cell's data as text plus a ProgressBar.
            </summary>
            <param name="progressBarColor">Progress bar's background color</param>
            <param name="showPercentText">Indicates whether the percentage text should be displayed or not</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ProgressBar(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Drawing.Color},System.Boolean)">
            <summary>
            Displaying current cell's data as text plus a ProgressBar.
            </summary>
            <param name="progressBarColorFormula">Progress bar's background color based on the current row's values.</param>
            <param name="showPercentText">Indicates whether the percentage text should be displayed or not.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.Symbol(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.AdobeZapfDingbats})">
            <summary>
            Displaying the current cell's data as a Zapf Dingbats symbol.
            </summary>
            <param name="onSelectSymbol">Choose a Zapf Dingbats symbol based on the passed value.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.WingdingsSymbol(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.Wingdings})">
            <summary>
            Displaying the current cell's data as a Wingdings symbol.
            </summary>
            <param name="onSelectSymbol">Choose a Wingdings symbol based on the passed value.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.MonthCalendar(PdfRpt.Calendar.CalendarAttributes)">
            <summary>
            Displaying current cell's data as a MonthCalendar.
            Calendar's cell data type should be CalendarData. Use DaysInfoToCalendarData.MapToCalendarDataList to map list of the DayInfo's to the list of CalendarData's.
            </summary>
            <param name="data">MonthCalendarField's data.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.TextBlock">
            <summary>
            Displaying current cell's data as text.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.ColumnItemsTemplateBuilder.ColumnItemsTemplate">
            <summary>
            Gets the Column Items Template
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.CustomRowsBuilder">
            <summary>
            Custom Rows Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.CustomRowsBuilder.AddCell(System.String,System.Object,System.String)">
            <summary>
            Adds a new cell to the current row
            </summary>
            <param name="propertyName">Property name of the current cell</param>
            <param name="propertyValue">Property value of the current cell</param>
            <param name="formattedValue">Formatted Property value of the current cell</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.CustomRowsBuilder.AddCell``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String)">
            <summary>
            Adds a new cell to the current row
            </summary>
            <param name="propertyName">Property name of the current cell</param>
            <param name="propertyValue">Property value of the current cell</param>
            <param name="formattedValue">Formatted Property value of the current cell</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.CustomRowsBuilder.RowCells">
            <summary>
            List of the cells of the current row.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.CustomRowsBuilder.EventsArgs">
            <summary>
            Available data
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder">
            <summary>
            Default Header Provider Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.Message(System.String)">
            <summary>
            A message to show.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.MessageFontColor(iTextSharp.text.BaseColor)">
            <summary>
            Message's FontColor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.MessageFontStyle(PdfRpt.Core.Contracts.DocumentFontStyle)">
            <summary>
            Message's FontStyle.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.ImagePath(System.String)">
            <summary>
            An optional logo path.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.RunDirection(System.Nullable{PdfRpt.Core.Contracts.PdfRunDirection})">
            <summary>
            A Possible run direction value, left-to-right or right-to-left.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.GroupHeaderCells(System.Action{PdfRpt.FluentInterface.HeaderCellsBuilder})">
            <summary>
            Return dynamic cells of the group header.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.GroupHeaderColumnsNumber(System.Int32)">
            <summary>
            Number of columns of GroupHeader.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DefaultHeaderProviderBuilder.DefaultHeaderProvider">
            <summary>
            Gets the Default Header Provider.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.GenericFontProviderBuilder">
            <summary>
            A Generic Font Class
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.GenericFontProviderBuilder.Path(System.String,System.String)">
            <summary>
            Sets the fonts path. Its default value is tahoma.
            </summary>
            <param name="font1">Font1's path</param>
            <param name="font2">Font2's path</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.GenericFontProviderBuilder.Color(System.Drawing.Color)">
            <summary>
            Font's color. Its default value is black.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.GenericFontProviderBuilder.Size(System.Int32)">
            <summary>
            Font's size. Its default value is 9.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.GenericFontProviderBuilder.Style(PdfRpt.Core.Contracts.DocumentFontStyle)">
            <summary>
            Font's style. Its default value is Normal.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.HeaderCellsBuilder">
            <summary>
            Header Cells Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.HeaderCellsBuilder.AddCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Adds a new cell
            </summary>
            <param name="cell">cell attributes</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.HeaderCellsBuilder.RowData">
            <summary>
            Current Row's Data.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.HeaderCellsBuilder.SummaryData">
            <summary>
            List of Summary Data.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.HeaderCellsBuilder.HeaderCells">
            <summary>
            List of Header Cells.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.InjectCustomRowsBuilder">
            <summary>
            Inject Custom Rows Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InjectCustomRowsBuilder.AddRow(System.Action{PdfRpt.FluentInterface.CustomRowsBuilder})">
            <summary>
            Custom Rows Builder
            </summary>
            <param name="customRowsBuilder"></param>
        </member>
        <member name="P:PdfRpt.FluentInterface.InjectCustomRowsBuilder.Rows">
            <summary>
            List of the new rows.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.InjectCustomRowsBuilder.EventsArgs">
            <summary>
            Available data
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.InlineFieldBuilder">
            <summary>
            Defines how to display the current cell's data
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFieldBuilder.BasicProperties(PdfRpt.Core.Contracts.CellBasicProperties)">
            <summary>
            Table's Cells Definitions. If you don't set this value, 
            it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFieldBuilder.ConditionalFormatFormula(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.CellBasicProperties})">
            <summary>
            Defines the current cell's properties, based on the other cells values.
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFieldBuilder.DrawOnCell(System.Action{PdfRpt.Core.Contracts.InlineFieldData})">
            <summary>
            It will be called at the end of the cell's rendering.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFieldBuilder.RenderCell(System.Func{PdfRpt.Core.Contracts.InlineFieldData,iTextSharp.text.pdf.PdfPCell})">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.InlineFooterProviderBuilder">
            <summary>
            Defines dynamic footer of the pages.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFooterProviderBuilder.FooterProperties(PdfRpt.Core.Contracts.FooterBasicProperties)">
            <summary>
            Properties of page footers.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineFooterProviderBuilder.AddPageFooter(System.Func{PdfRpt.Core.Contracts.FooterData,PdfRpt.Core.Contracts.PdfGrid})">
            <summary>
            Returns dynamic content of the page footer.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.InlineHeaderProviderBuilder">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineHeaderProviderBuilder.AddGroupHeader(System.Func{PdfRpt.Core.Contracts.HeaderData,PdfRpt.Core.Contracts.PdfGrid})">
            <summary>
            Returns dynamic content of the group header.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.InlineHeaderProviderBuilder.AddPageHeader(System.Func{PdfRpt.Core.Contracts.HeaderData,PdfRpt.Core.Contracts.PdfGrid})">
            <summary>
            Returns dynamic content of the page header.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder">
            <summary>
            Conventions Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.ShowRowNumberColumn(System.Boolean)">
            <summary>
            Sets the visibility of auto generated row # column.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.RowNumberColumnCaption(System.String)">
            <summary>
            Sets the caption of auto generated row # column.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddTypeDisplayFormatFormula(System.Type,System.Func{System.Object,System.String})">
            <summary>
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddColumnDisplayFormatFormula(System.String,System.Func{System.Object,System.String})">
            <summary>
            Here you can control how cells should be rendered based on their column names.
            ColumnNamesDisplayFormatFormulas has higher priority.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddTypeColumnItemsTemplate(System.Type,PdfRpt.Core.Contracts.IColumnItemsTemplate)">
            <summary>
            Custom template of the in use property, controls how and what should be rendered in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            ColumnNamesItemsTemplates has higher priority.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddColumnItemsTemplate(System.String,PdfRpt.Core.Contracts.IColumnItemsTemplate)">
            <summary>
            Custom template of the in use property, controls how and what should be rendered based on their column names in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddTypeAggregateFunction(System.Type,PdfRpt.Core.Contracts.IAggregateFunction)">
            <summary>
            Here you can assign an AggregateFunction to the specific data type.
            ColumnNamesAggregateFunctions has higher priority.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.AddColumnAggregateFunction(System.String,PdfRpt.Core.Contracts.IAggregateFunction)">
            <summary>
            Here you can assign an AggregateFunction to the specific column name.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder.PdfRptAdHocColumnsConventions">
            <summary>
            Gets the AdHoc Columns Conventions
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableColumnsBuilder">
            <summary>
            MainTable Columns Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableColumnsBuilder.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableColumnsBuilder.AddColumn(System.Action{PdfRpt.FluentInterface.ColumnAttributesBuilder})">
            <summary>
            Column Builder
            </summary>
            <param name="pdfColumnAttributesBuilder"></param>
        </member>
        <member name="P:PdfRpt.FluentInterface.MainTableColumnsBuilder.PdfColumns">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableDataSourceBuilder">
            <summary>
            Main Table DataSource Builder.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.Xml(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Converts the XML documents data to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="xmlData">XML document's content</param>
            <param name="descendantsXPathSelect">Descendants XPath</param>
            <param name="itemsXPathList">XPath list of the required items</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.StronglyTypedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts a list of strongly typed items to an IEnumerable of Pdf Cells Data.
            It's useful for working with different ORM's, because final results of all them could be 
            a strongly typed list of data.
            </summary>
            <param name="listOfRows">list of items</param>
            <param name="dumpLevel">how many levels should be searched</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.SqlDataReader(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.GenericDataReader(System.String,System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="providerName">Invariant name of a provider. Supports the ADO.NET Factory classes to allow you the ability to dynamically load the provider at runtime</param>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.OdbcDataReader(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.ExcelDataReader(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="filePath">.xlsx or .xls file path</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.DataTable(System.Data.DataTable)">
            <summary>
            Converts a DataTable to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="rows">our dataTable value to convert</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.Crosstab(System.Collections.IEnumerable,System.Boolean,System.Int32)">
            <summary>
            Converts the result of the CrosstabExtension.Pivot method to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="source">Result of the CrosstabExtension.Pivot method</param>
            <param name="topFieldsAreVariableInEachRow">Indicates whether top fields should be prepopulated before starting the main table's rendering or not</param>
            <param name="dumpLevel">how many levels should be searched</param>  
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.AnonymousTypeList(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Converts a list of anonymous type items to an IEnumerable of Pdf Cells Data.
            </summary>
            <param name="listOfRows">list of items</param>
            <param name="dumpLevel">how many levels should be searched</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.AccessDataReader(System.String,System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="filePath">.mdb or .accdb file path</param>
            <param name="password">the optional password</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableDataSourceBuilder.CustomDataSource(System.Func{PdfRpt.Core.Contracts.IDataSource})">
            <summary>
            Main table's data source. The data to render. 
            </summary>
            <param name="mainTableDataSource">Main table's data source</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableEventsBuilder">
            <summary>
            Events Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.DataSourceIsEmpty(System.String)">
            <summary>
            Fires when there's no data to render.
            </summary>
            <param name="message">a message to show</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.CellAdded(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a cell has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.CellCreated(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when a cell is created.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.DocumentClosing(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires before closing the Document.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.DocumentOpened(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when Document is created.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.GroupAdded(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a group has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.MainTableAdded(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after MainTable has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.MainTableCreated(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when MainTable is created.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.RowAdded(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a row has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.RowStarted(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires before a row has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.ShouldSkipRow(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a row has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.ShouldSkipHeader(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a header row has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.ShouldSkipFooter(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a footer row has been added.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.PageTableAdded(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after each part of the MainTable has been added to the current page.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.RowStartedInjectCustomRows(System.Action{PdfRpt.FluentInterface.InjectCustomRowsBuilder})">
            <summary>
            Fires before RowStartedEvent when the RowType is DataTableRow.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableEventsBuilder.RowAddedInjectCustomRows(System.Action{PdfRpt.FluentInterface.InjectCustomRowsBuilder})">
            <summary>
            Fires after RowAddedEvent when the RowType is DataTableRow.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.MainTableEventsBuilder.PdfFont">
            <summary>
            Gets/Sets the default fonts of the document.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder">
            <summary>
            Summary Settings Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.OverallSummarySettings(System.String,System.String,System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying summary values of each pages by considering the previous pages data.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.PreviousPageSummarySettings(System.String,System.String,System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying total summary values of the previous page at beginning of the each page.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.PageSummarySettings(System.String,System.String,System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying summary values of individual pages, regardless of the previous pages
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.AllGroupsSummarySettings(System.String,System.String,System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Sets summary cell's settings of the all groups. 
            It will be printed at the end of the rendering of all groups.
            It can be null if grouping is not enabled.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.OverallSummarySettings``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying summary values of each pages by considering the previous pages data.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.PreviousPageSummarySettings``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying total summary values of the previous page at beginning of the each page.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.PageSummarySettings``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Displaying summary values of individual pages, regardless of the previous pages
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.AllGroupsSummarySettings``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment},PdfRpt.Core.Contracts.SummaryLocation)">
            <summary>
            Sets summary cell's settings of the all groups. 
            It will be printed at the end of the rendering of all groups.
            It can be null if grouping is not enabled.
            </summary>
            <param name="label">Sets the value of summary cell's label</param>
            <param name="labelColumnProperty">Sets the location of summary cell's label, based on the available visible properties.</param>
            <param name="showOnEachPage">Sets the visibility of the cell</param>
            <param name="labelHorizontalAlignment">Sets summary cell's label horizontal alignment</param>
            <param name="summaryLocation">Summary Cell's Location</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.MainTableSummarySettingsBuilder.SummarySettings">
            <summary>
            Gets the SummarySettings
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTableTemplateBuilder">
            <summary>
            Template Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableTemplateBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableTemplateBuilder.BasicTemplate(PdfRpt.Core.Contracts.BasicTemplate)">
            <summary>
            Sets a predefined template.
            </summary>
            <param name="template">selected template</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTableTemplateBuilder.CustomTemplate(PdfRpt.Core.Contracts.ITableTemplate)">
            <summary>
            Sets the default template. 
            It can be null. In this case a new BasicTemplateProvider based on the DefaultBasicTemplate will be used automatically.
            </summary>
            <param name="template">custom template</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.PagesFooterBuilder">
            <summary>
            Pages Footer Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesFooterBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesFooterBuilder.DefaultFooter(System.String,PdfRpt.Core.Contracts.PdfRunDirection)">
            <summary>
            Using the DefaultFooterProvider class.
            </summary>
            <param name="printDate">Sets the optional print date value of the DefaultFooterProvider.</param>
            <param name="direction">Possible run direction values, left-to-right or right-to-left.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesFooterBuilder.XHtmlFooter(System.Action{PdfRpt.FluentInterface.XHtmlFooterProviderBuilder})">
            <summary>
            Using the predefined XHtmlFooterProvider class.
            </summary>
            <param name="htmlFooterProviderBuilder">Footer Provider Builder</param>        
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesFooterBuilder.InlineFooter(System.Action{PdfRpt.FluentInterface.InlineFooterProviderBuilder})">
            <summary>
            Defines dynamic footers of the pages.
            </summary>
            <param name="inlineFooterProviderBuilder">Defines dynamic footers of the pages.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesFooterBuilder.CustomFooter(PdfRpt.Core.Contracts.IPageFooter)">
            <summary>
            Defines custom footer of the each page.
            </summary>
            <param name="footer">a custom footer.</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.PagesFooterBuilder.PdfFont">
            <summary>
            Gets/Sets the default fonts of the footer.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.PagesHeaderBuilder">
            <summary>
            Pages Header Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.CacheHeader(System.Boolean)">
            <summary>
            You can define different headers for each page. 
            If all of the headers of the document's pages are the same, set this value to true, to optimize the performance and document size.
            Its default value is true.
            </summary>
            <param name="cache">true or false</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.DefaultHeader(System.Action{PdfRpt.FluentInterface.DefaultHeaderProviderBuilder})">
            <summary>
            Using the predefined DefaultHeaderProvider class.
            </summary>
            <param name="defaultHeaderProviderBuilder">Header Provider Builder</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.XHtmlHeader(System.Action{PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder})">
            <summary>
            Using the predefined XHtmlHeaderProvider class.
            </summary>
            <param name="htmlHeaderProviderBuilder">Header Provider Builder</param>        
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.InlineHeader(System.Action{PdfRpt.FluentInterface.InlineHeaderProviderBuilder})">
            <summary>
            Defines dynamic headers of the pages and individual groups.
            </summary>
            <param name="inlineHeaderProviderBuilder">Defines dynamic headers of the pages and individual groups.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.PagesHeaderBuilder.CustomHeader(PdfRpt.Core.Contracts.IPageHeader)">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
            <param name="header">a dynamic header</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.PagesHeaderBuilder.PdfFont">
            <summary>
            Gets/Sets the default fonts of the header.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.ColumnAttributesBuilder">
            <summary>
            Column Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.IsRowNumber(System.Boolean)">
            <summary>
            Creates an auto generated row # column starting from 1
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PropertyName(System.String,System.Int32)">
            <summary>
            Field name of the current column's cells.
            If it's a RowNumber or CalculatedField, it can be an arbitrary string.
            If you are not specifying the duplicate property names, ignore the index of the property in data source columns.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>
            Field name of the current column's cells.
            If it's a RowNumber or CalculatedField, it can be an arbitrary string.
            If you are not specifying the duplicate property names, ignore the index of the property in data source columns.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Width(System.Single)">
            <summary>
            The column's width according to the PdfRptPageSetup.MainTableColumnsWidthsType value.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.IsVisible(System.Boolean)">
            <summary>
            Determines exclusion or visibility of this column.
            If GroupsPreferences.GroupType is set to PdfRptGroupType.IncludeGroupingColumns, this property will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Order(System.Int32)">
            <summary>
            Column's order
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.FixedHeight(System.Single)">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            Also you can set the FixedHeight to define the height yourself.
            In this case the overflowed text with be trimmed. 
            Set FixedHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.MinimumHeight(System.Single)">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            To assure a certain cell height, without losing any content, you can set the MinimumHeight.
            Set MinimumHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Padding(System.Single)">
            <summary>
            Column's padding value
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PaddingBottom(System.Single)">
            <summary>
            Column's PaddingBottom value
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PaddingLeft(System.Single)">
            <summary>
            Column's PaddingLeft value
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PaddingRight(System.Single)">
            <summary>
            Column's PaddingRight value
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.PaddingTop(System.Single)">
            <summary>
            Column's PaddingTop value
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.HeaderCell(System.String,System.Boolean,System.Int32,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment})">
            <summary>
            Column's header cell. It can not be null.
            </summary>
            <param name="caption">The string to be displayed as the current column's caption.</param>
            <param name="mergeHeaderCell">If true, the current header cell (and not its data column) will be merged with the next one and the next label will be ignored.</param>
            <param name="captionRotation">The rotation of the column's caption. Possible values are 0, 90, 180 and 270.</param>
            <param name="horizontalAlignment">Content's Horizontal alignment. If null, IPdfRptTemplate.HeaderHorizontalAlignment will be used.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.AddHeadingCell(System.String,System.Boolean,System.Int32,System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment})">
            <summary>
            Places the optional heading cell(s) above the current column's HeaderCell.
            It can be null.
            </summary>
            <param name="caption">The string to be displayed as the current column's caption.</param>
            <param name="mergeHeaderCell">If true, the current header cell (and not its data column) will be merged with the next one and the next label will be ignored.</param>
            <param name="captionRotation">The rotation of the column's caption. Possible values are 0, 90, 180 and 270.</param>
            <param name="horizontalAlignment">Content's Horizontal alignment. If null, IPdfRptTemplate.HeaderHorizontalAlignment will be used.</param>         
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.ColumnItemsTemplate(System.Action{PdfRpt.FluentInterface.ColumnItemsTemplateBuilder})">
            <summary>
            Custom template of the in use property, controls how and what should be rendered in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Font(System.Action{PdfRpt.FluentInterface.GenericFontProviderBuilder})">
            <summary>
            If you don't want to use the default font's settings for this column, set this optional column's font info.
            </summary>        
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.CellsHorizontalAlignment(System.Nullable{PdfRpt.Core.Contracts.HorizontalAlignment})">
            <summary>
            Content's Horizontal alignment
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.CalculatedField(System.Boolean,System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Object})">
            <summary>
            Produce a new column based on the existing values of other columns.
            </summary>
            <param name="isCalculatedField">It enables using CalculatedFieldFormula to produce a new column based on the existing values of other columns according to the provided formula.</param>
            <param name="calculatedFieldFormula">
            By setting IsCalculatedField to true, you will be able to define a completely new column which is not exist in the main table's DataSource.
            CalculatedFieldFormula fires before a CalculatedField is being rendered.
            Now you can calculate the current cell's value, based on the other cells values.
            Here IList contains actual row's cells values.
            It can be null.         
            </param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.CalculatedField(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Object})">
            <summary>
            Produce a new column based on the existing values of other columns.
            </summary>
            <param name="calculatedFieldFormula">
            CalculatedFieldFormula fires before a CalculatedField is being rendered.
            Now you can calculate the current cell's value, based on the other cells values.
            Here IList contains actual row's cells values.
            It can be null.                  
            </param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.AggregateFunction(System.Action{PdfRpt.FluentInterface.AggregateFunctionBuilder})">
            <summary>
            Aggregate Function
            It can be null.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Group(System.Boolean,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Group Settings
            </summary>
            <param name="includeInGrouping">Defining a group of rows by including this filed in grouping</param>
            <param name="includedGroupFieldEqualityComparer">Custom comparison implementation of current and last field values of this column, to detect start of a new group</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ColumnAttributesBuilder.Group(System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Group Settings. Defining a group of rows by including this filed in grouping.
            </summary>
            <param name="includedGroupFieldEqualityComparer">Custom comparison implementation of current and last field values of this column, to detect start of a new group</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.ColumnAttributesBuilder.PdfColumnAttributes">
            <summary>
            Gets the Columns Attributes
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.DataBuilder">
            <summary>
            A sample template class for IPdfReportData.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.DataTemplate">
            <summary>
            A sample template class for IPdfReportData.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IPdfReportData">
            <summary>
            Main interface of PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.DocumentPreferences">
            <summary>
            Document settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.MainTableDataSource">
            <summary>
            Main table's data source. The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.Header">
            <summary>
            Defines dynamic headers of pages and individual groups.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.Footer">
            <summary>
            Defines footer of the each page.
            Leave it as null if you you want to use PageSetup.ShowDefaultFooter = true.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.SummarySettings">
            <summary>
            Pages and groups summary values settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.FileName">
            <summary>
            PDF file's name
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.PdfStreamOutput">
            <summary>
            PDF file's stream
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.Template">
            <summary>
            Main table's template
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.MainTableEvents">
            <summary>
            Main table's cells and rows events
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.PdfFont">
            <summary>
            Pdf document's font
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.PdfColumnsAttributes">
            <summary>
            Defining which properties of MainTableDataSource should be rendered and how.
            If you don't set it, list of the main table's columns will be extracted from MainTableDataSource automatically.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.AdHocColumnsConventions">
            <summary>
            If you don't set PdfColumnsDefinitions, list of the main table's columns will be extracted from MainTableDataSource automatically.
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfReportData.DocumentSecurity">
            <summary>
            Sets the encryption options for this document.
            Leave it as null if you don't want to use it.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.CacheHeader(System.Boolean)">
            <summary>
            You can define different headers for each page. 
            If all of the headers of the document's pages are the same, set this value to true, to optimize the performance and document size.
            Its default value is true.
            </summary>
            <param name="cache">true or false</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultNumberOfDataRowsPerPage(System.Int32)">
            <summary>
            If sets to zero, NumberOfDataRowsPerPage will be calculated automatically, otherwise as specified.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="numberOfDataRowsPerPage">number of data rows per page</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultFontsPath(System.String,System.String)">
            <summary>
            Sets the optional fonts path.
            Use this method or SetFonts method or set the PdfFont property value directly.
            </summary>
            <param name="defaultFont1">font1's path</param>
            <param name="defaultFont2">font2's path</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultFontsSize(System.Int32)">
            <summary>
            Sets the default fonts size.
            Use this method or SetFonts method or set the PdfFont property value directly.
            </summary>
            <param name="size">font size</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultFontsColor(iTextSharp.text.BaseColor)">
            <summary>
            Sets the default fonts color.
            Use this method or SetFonts method or set the PdfFont property value directly.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultFooterPrintDate(System.String,PdfRpt.Core.Contracts.PdfRunDirection)">
            <summary>
            Sets the optional print date value of the DefaultFooterProvider.
            Use this method or SetFooter method or set the Footer property value directly.
            </summary>
            <param name="printDate">print date value</param>
            <param name="direction">Possible run direction values, left-to-right or right-to-left.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultBasicTemplate(PdfRpt.Core.Contracts.BasicTemplate)">
            <summary>
            Sets the default template.
            Use this method or set the Template property value directly.
            </summary>
            <param name="template">selected template</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultRunDirection(PdfRpt.Core.Contracts.PdfRunDirection)">
            <summary>
            Sets the run direction to rtl or ltr.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="runDirection">run direction, rtl or ltr</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the page size to PageSize.A4 for instance.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="pageSize">selected page size</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultDocumentMetadata(PdfRpt.Core.Contracts.DocumentMetadata)">
            <summary>
            Sets document's metadata.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="metadata">document's metadata</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultColumnsWidthsType(PdfRpt.Core.Contracts.TableColumnWidthType)">
            <summary>
            Determines the WidthType of the column.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="columnsWidthsType"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultHorizontalStackPanelPreferences(PdfRpt.Core.Contracts.HorizontalStackPanelPreferences)">
            <summary>
            If MainTableType is set to HorizontalStackPanel, here you can define its preferences such as
            number of columns per row.
            </summary>
            <param name="data">preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultTableType(PdfRpt.Core.Contracts.TableType)">
            <summary>
            Sets the TableType. Its default value is a noraml PdfGrid.
            </summary>
            <param name="tableType">Value of the TableType</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultDocumentMargins(PdfRpt.Core.Contracts.DocumentMargins)">
            <summary>
            Sets the new document's margins. Its predefined values are Bottom = 60, Left = 36, Right = 36, Top = 36.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="margins">The new document's margins</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultOrientation(PdfRpt.Core.Contracts.PageOrientation)">
            <summary>
            Sets the PageOrientation.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="orientation">Page Orientation</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultSplitLate(System.Boolean)">
            <summary>
            Split the cells of the first row that doesn't fit the page.
            If true, a that row doesn't fit on the page, its complete row will be forwarded to the next page.
            If false, rows that are too high to fit on a page will be dropped from the table.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultSplitRows(System.Boolean)">
            <summary>
            If true, splits rows that are forwarded to the next page but that still
            don't fit because the row height exceeds the available page height.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultKeepTogether(System.Boolean)">
            <summary>
            If true, the table will be kept on one page if it fits, by forcing a
            new page if it doesn't fit on the current page.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultSpacingBefore(System.Single)">
            <summary>
            Spacing before the main table.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultSpacingAfter(System.Single)">
            <summary>
            Spacing after the main table.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultPagesBackgroundColor(System.Drawing.Color)">
            <summary>
            Setting Page Background Color.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="backgroundColor">Pages Background Color</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultBackgroundImageFilePath(System.String)">
            <summary>
            Background image's file path.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="backgroundImageFilePath">Background image's file path.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultBackgroundImagePosition(System.Nullable{System.Drawing.PointF})">
            <summary>
            Sets the absolute position of the Background image.
            If it's set to null, the image will be painted at the center of the page.
            </summary>
            <param name="position">Background image's position</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultFileAttachments(System.Collections.Generic.IList{PdfRpt.Core.Contracts.FileAttachment})">
            <summary>
            Adds the optional file attachments at the document level.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="fileAttachments">file attachments</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultPrintingPreferences(PdfRpt.Core.Contracts.PrintingPreferences)">
            <summary>
            Indicates default values of print dialog box.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="printingPreferences">printing preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultViewerPreferences(PdfRpt.Core.Contracts.PdfViewerPreferences)">
            <summary>
            Specifies the Adobe Reader's settings when a document is opened.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="viewerPreferences">viewer preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultShowHeaderRow(System.Boolean)">
            <summary>
            Sets the visibility of the main table's header row.
            It's true by default.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="showHeaderRow">show header row</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultConformanceLevel(PdfRpt.Core.Contracts.PdfXConformance)">
            <summary>
            Sets subsets of the PDF specification (ISO 15930-1 to ISO 15930-8) that promise
            predictable and consistent output for press printing.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="conformanceLevel">conformance level</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultCompression(PdfRpt.Core.Contracts.CompressionSettings)">
            <summary>
            Compression settings.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="compression">Compression settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultGroupsPreferences(PdfRpt.Core.Contracts.GroupsPreferences)">
            <summary>
            Groups Preferences.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="groupsPreferences">Groups Preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultDiagonalWatermark(PdfRpt.Core.Contracts.DiagonalWatermark)">
            <summary>
            A watermark text to display.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="diagonalWatermark">watermark settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultMultipleColumnsPerPage(PdfRpt.Core.Contracts.MultipleColumnsPerPage)">
            <summary>
            Wrapping main table in multiple columns per pages.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="multipleColumnsPerPage">multiple columns per page</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DefaultExportSettings(System.Collections.Generic.IList{PdfRpt.Core.Contracts.IDataExporter})">
            <summary>
            Sets the desired exporters such as ExportToExcel.
            If you are setting SetDocumentPreferences method or DocumentPreferences property value directly, ignore this method.
            </summary>
            <param name="exportSettings">export settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetDocumentPreferences(PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Sets Document's settings.
            It can be null. In this case some common default settings will be applied.
            </summary>
            <param name="documentPreferences">Document's settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetMainTableDataSource(System.Func{PdfRpt.Core.Contracts.IDataSource})">
            <summary>
            Main table's data source. The data to render.
            </summary>
            <param name="mainTableDataSource">Main table's data source</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetHeader(PdfRpt.Core.Contracts.IPageHeader)">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
            <param name="header">a dynamic header</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetFooter(PdfRpt.Core.Contracts.IPageFooter)">
            <summary>
            Defines custom footer of the each page.
            If sets to null, the DefaultFooterProvider will be used automatically.
            </summary>
            <param name="footer">a custom footer.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetSummarySettings(PdfRpt.Core.Contracts.SummaryCellSettings)">
            <summary>
            Sets Pages and groups summary values settings.
            </summary>
            <param name="summarySettings">summary values settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetFileName(System.String)">
            <summary>
            Sets produced PDF file's path and name.
            It can be null if you are using an in memory stream.
            </summary>
            <param name="fileName">produced PDF file's path and name</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetStreamOutput(System.IO.Stream)">
            <summary>
            Sets the PDF file's stream.
            It can be null. In this case a new FileStream will be used automatically and you need to provide the FileName.
            </summary>
            <param name="pdfStreamOutput">the PDF file's stream</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetTemplate(PdfRpt.Core.Contracts.ITableTemplate)">
            <summary>
            Sets the default template.
            It can be null. In this case a new BasicTemplateProvider based on the DefaultBasicTemplate will be used automatically.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetMainTableEvents(PdfRpt.Core.Contracts.Events)">
            <summary>
            Sets the Main table's cells and rows events. It can be null.
            </summary>
            <param name="mainTableEvents">Main table's cells and rows events</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DataSourceIsEmptyEvent(System.String)">
            <summary>
            Fires when there's no data to render.
            By setting MainTableEvents.DataSourceIsEmptyEvent property value directly, this method will be ignored.
            </summary>
            <param name="message">a message to show</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.CellAddedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a cell has been added.
            By setting MainTableEvents.CellAddedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.CellCreatedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when a cell is created.
            By setting MainTableEvents.CellCreatedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DocumentClosingEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires before closing the Document.
            By setting MainTableEvents.DocumentClosingEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.DocumentOpenedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when Document is created.
            By setting MainTableEvents.DocumentOpenedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.GroupAddedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a group has been added.
            By setting MainTableEvents.GroupAddedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.MainTableAddedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after MainTable has been added.
            By setting MainTableEvents.MainTableAddedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.MainTableCreatedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires when MainTable is created.
            By setting MainTableEvents.MainTableCreatedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.RowAddedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after a row has been added.
            By setting MainTableEvents.RowAddedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.ShouldSkipRowEvent(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a row has been added.
            By setting MainTableEvents.ShouldSkipRow property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.ShouldSkipHeaderEvent(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a header row has been added.
            By setting MainTableEvents.ShouldSkipHeader property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.ShouldSkipFooterEvent(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Boolean})">
            <summary>
            Fires before a footer row has been added.
            By setting MainTableEvents.ShouldSkipFooter property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.RowStartedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires before a row has been added.
            By setting MainTableEvents.RowStartedEvent property value directly, this method will be ignored.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.PageTableAddedEvent(System.Action{PdfRpt.Core.Contracts.EventsArguments})">
            <summary>
            Fires after each part of the MainTable has been added to the current page.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.RowStartedInjectCustomRowsEvent(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Collections.Generic.IList{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData}}})">
            <summary>
            Fires before RowStartedEvent when the RowType is DataTableRow.
            </summary>
            <param name="injectCustomRows">list of custom rows to inject</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.RowAddedInjectCustomRowsEvent(System.Func{PdfRpt.Core.Contracts.EventsArguments,System.Collections.Generic.IList{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData}}})">
            <summary>
            Fires after RowAddedEvent when the RowType is DataTableRow.
            </summary>
            <param name="injectCustomRows">list of custom rows to inject</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetFonts(PdfRpt.Core.Contracts.IPdfFont)">
            <summary>
            Sets the default fonts of the document. At least 2 fonts should be defined.
            Or ignore this method and use DefaultFontsPath method.
            </summary>
            <param name="defaultFonts">default fonts</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetColumnsAttributes(System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes})">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="pdfColumnsAttributes"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetAdHocColumnsConventions(PdfRpt.Core.Contracts.AdHocColumnsConventions)">
            <summary>
            If you don't set PdfColumnsDefinitions, list of the main table's columns will be extracted from MainTableDataSource automatically.
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
            <param name="adHocColumnsConventions">conventions</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DataTemplate.SetPdfDocumentSecurity(PdfRpt.Core.Contracts.DocumentSecurity)">
            <summary>
            Sets the encryption options for this document.
            </summary>
            <param name="documentSecurity">encryption options</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.CustomExportSettings">
            <summary>
            Gets or Sets The Custom Export Settings.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.FileAttachments">
            <summary>
            Gets or Sets The File Attachments.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.DocumentPreferences">
            <summary>
            Sets Document's settings.
            It can be null. In this case some common default settings will be applied.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.MainTableDataSource">
            <summary>
            Sets PdfRpt's DataSource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.Header">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.Footer">
            <summary>
            Defines custom footer of the each page.
            If sets to null, the DefaultFooterProvider will be used automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.SummarySettings">
            <summary>
            Sets Pages and groups summary values settings.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.FileName">
            <summary>
            Sets produced PDF file's path and name.
            It can be null if you are using an in memory stream.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.PdfStreamOutput">
            <summary>
            Sets the PDF file's stream.
            It can be null. In this case a new FileStream will be used automatically and you need to provide the FileName.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.Template">
            <summary>
            Sets the default template.
            It can be null. In this case a new BasicTemplateProvider based on the DefaultBasicTemplate will be used automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.MainTableEvents">
            <summary>
            Sets the Main table's cells and rows events. It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.PdfFont">
            <summary>
            Sets the default fonts of the document. At least 2 fonts should be defined.
            Or ignore this property and use DefaultFontsPath method.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.PdfColumnsAttributes">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.AdHocColumnsConventions">
            <summary>
            If you don't set PdfColumnsDefinitions, list of the main table's columns will be extracted from MainTableDataSource automatically.
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.DataTemplate.DocumentSecurity">
            <summary>
            Sets the encryption options for this document.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.EventsArguments">
            <summary>
            PdfRptEvents Args
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.LastOverallAggregateValueOf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Returns the Overall Aggregate Value of the specified property.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression">the specified property</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.LastOverallAggregateValueOf(System.String,System.String)">
            <summary>
            Returns the Overall Aggregate Value of the specified property.
            </summary>
            <param name="propertyName">the specified property</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.LastOverallAggregateValue(System.String)">
            <summary>
            Returns the Overall Aggregate Value of the specified property.
            </summary>
            <param name="propertyName">the specified property</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.LastOverallAggregateValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the Overall Aggregate Value of the specified property.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression">the specified property</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PdfFont">
            <summary>
            Pdf document's font
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PdfColumnsAttributes">
            <summary>
            Defining which properties of MainTableDataSource should be rendered and how.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PageSetup">
            <summary>
            Document settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PdfDoc">
            <summary>
            Pdf Document Object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PdfWriter">
            <summary>
            Pdf Writer Object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.Cell">
            <summary>
            Cell's info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.CellType">
            <summary>
            Main table's cell type
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.RowType">
            <summary>
            Main table's row type
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.ColumnNumber">
            <summary>
            Column Number.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PdfStreamOutput">
            <summary>
            PDF file stream
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.ColumnCellsSummaryData">
            <summary>
            Summary Data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.Table">
            <summary>
            Main table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.TableRowData">
            <summary>
            Current row's data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.TableRowDataIdx">
            <summary>
            Current row's data indexed Property.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowData">
            <summary>
            Previous row's data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowDataIdx">
            <summary>
            Previous row's data indexed Property.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowDataIndexer">
            <summary>
            Acts as an indexer for the PreviousTableRowData property.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowDataIndexer.#ctor(PdfRpt.Core.Contracts.EventsArguments)">
            <summary>
            ctor.
            </summary>
            <param name="owner">parent object</param>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowDataIndexer.Item(System.String)">
            <summary>
            Previous row's data indexed Property.
            </summary>
            <param name="propertyName">A property to find</param>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.PreviousTableRowDataIndexer.Length">
            <summary>
            Length of the PreviousTableRowData.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.EventsArguments.TableRowDataIndexer">
            <summary>
            Acts as an indexer for the TableRowData property.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.EventsArguments.TableRowDataIndexer.#ctor(PdfRpt.Core.Contracts.EventsArguments)">
            <summary>
            ctor.
            </summary>
            <param name="owner">parent object</param>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.TableRowDataIndexer.Item(System.String)">
            <summary>
            Current row's data indexed Property.
            </summary>
            <param name="propertyName">A property to find</param>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.EventsArguments.TableRowDataIndexer.Length">
            <summary>
            Length of the TableRowData.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfXConformance">
            <summary>     
            Sets subsets of the PDF specification (ISO 15930-1 to ISO 15930-8) that promise 
            predictable and consistent output for press printing.
            The PDF/A specification (ISO 19005-1:2005): Document Management—Electronic Document File Format 
            for Long-Term Preservation.
            You can check the PDF/A conformance with the Preflight tool of Adobe Acrobat Pro for instance. 
            In Acrobat X, Preflight is an option under the Print Production Tools panel.
            More info: http://en.wikipedia.org/wiki/PDF/A
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFXNONE">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFX1A2001">
            <summary>
            The main goal of PDF/X-1a is to support blind exchange of PDF documents. 
            Blind exchange means you can deliver PDF documents to a print service provider 
            with hardly any technical discussion.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFX32002">
            <summary>
            Sets the conformance to PDF/X-3.
            A PDF/X-3 file can also contain color-managed data.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA1A">
            <summary>
            A synonym for ISO 19005-1 Level A conformance.
            FOR ARCHIVING and the file can be viewed without the originating application.
            Transparent objects and layers (Optional Content Groups) are forbidden in PDF/A-1.
            LZW and JPEG2000 image compressions are forbidden in PDF/A-1.
            Embedded files are forbidden in PDF/A-1.
            Encryption is forbidden.
            </summary>        
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA1B">
            <summary>
            A synonym for ISO 19005-1 Level B conformance.
            In order to meet level-B conformance, all fonts must be embedded, 
            encryption isn’t allowed, audio and video content are forbidden, 
            JavaScript and executable file launches are not permitted, and so forth.
            </summary>        
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA2A">
            <summary>
            Level A conformance (PDF/A-2a) indicates complete compliance with the ISO 19005-2 requirements, including those related to structural and semantic properties of documents.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA2B">
            <summary>
            Level B conformance (PDF/A-2b) indicates minimal compliance to ensure that the rendered visual appearance of a conforming file is preservable over the long term.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA2U">
            <summary>
            Level U conformance represents Level B conformance with the additional requirement that all text in the document have Unicode equivalents. 
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA3A">
            <summary>
            PDF/A-3a
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA3B">
            <summary>
            PDF/A-3b
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfXConformance.PDFA3U">
            <summary>
            PDF/A-3u
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AnnotationIcon">
            <summary>
            Possible PdfAnnotationIcon values
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Comment">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Note">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Help">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.NewParagraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Paragraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.AnnotationIcon.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.HeadingCell">
            <summary>
            Defines a heading cell
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeadingCell.MergeHeaderCell">
            <summary>
            If true, the current header cell (and not its data column) will be merged with the next one and the next label will be ignored.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeadingCell.Caption">
            <summary>
            The string to be displayed as the current column's caption.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeadingCell.CaptionRotation">
            <summary>
            The rotation of the column's caption. Possible values are 0, 90, 180 and 270.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.HeadingCell.HorizontalAlignment">
            <summary>
            Content's Horizontal alignment.
            If null, IPdfRptTemplate.HeaderHorizontalAlignment will be used.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CompressionLevel">
            <summary>
            possible compression levels
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CompressionLevel.Default">
            <summary>
            A possible compression level.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CompressionLevel.NoCompression">
            <summary>
            A possible compression level.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CompressionLevel.BestSpeed">
            <summary>
            A possible compression level.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CompressionLevel.BestCompression">
            <summary>
            A possible compression level.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.NonFullScreenPageMode">
            <summary>
            specifies how to display the document on exiting full-screen mode.
            These options only make sense if the page mode is full screen.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.NonFullScreenPageMode.UseNone">
            <summary>
            None of the tabs at the left are visible.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.NonFullScreenPageMode.UseOutlines">
            <summary>
            The document outline is visible.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.NonFullScreenPageMode.UseThumbs">
            <summary>
            Thumbnail images corresponding with the pages are visible.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.NonFullScreenPageMode.UseOC">
            <summary>
            The optional content group panel is visible.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellBasicProperties">
            <summary>
            Basic properties of the main table's cells
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.FixedHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            Also you can set the FixedHeight to define the height yourself.
            In this case the overflowed text with be trimmed. 
            Set FixedHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.MinimumHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            To assure a certain cell height, without losing any content, you can set the MinimumHeight.
            Set MinimumHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.CellPadding">
            <summary>
            Cell's padding value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PaddingBottom">
            <summary>
            Cell's PaddingBottom value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PaddingLeft">
            <summary>
            Cell's PaddingLeft value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PaddingRight">
            <summary>
            Cell's PaddingRight value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PaddingTop">
            <summary>
            Cell's PaddingTop value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.BorderWidth">
            <summary>
            Cell's border width value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PdfFont">
            <summary>
            Cell's font value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.PdfFontStyle">
            <summary>
            Cell's font's style value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.Rotation">
            <summary>
            Cell's content rotation angle value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.RunDirection">
            <summary>
            Cell's run direction value, LTR or RTL
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.ShowBorder">
            <summary>
            Sets visibility of the cell's border
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.BackgroundColor">
            <summary>
            Cell's background color value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.BorderColor">
            <summary>
            Cell's border color value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.FontColor">
            <summary>
            Cell's font color value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.HorizontalAlignment">
            <summary>
            Cell's template horizontal alignment  value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellBasicProperties.DisplayFormatFormula">
            <summary>
            Fires before each cell of this column is being rendered as a string. 
            Now you have time to manipulate the received object and apply your custom formatting function.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellRowData">
            <summary>
            PdfCell's Raw Data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.TableRowData">
            <summary>
            Contains actual row's fields values from TableDataSource and CalculatedFieldFormula.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.PdfRowType">
            <summary>
            Cell's row type value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.Value">
            <summary>
            Cell's raw data value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.FormattedValue">
            <summary>
            Formatted Property value of the current cell.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.ColumnNumber">
            <summary>
            Cell's index.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.LastRenderedRowNumber">
            <summary>
            Last rendered row number which can be different in multiple groups
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.PropertyName">
            <summary>
            Field name of the current column's cells
            If it's a RowNumber or CalculatedField, it can be an arbitrary string
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.PropertyType">
            <summary>
            Type of the  Property.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellRowData.CellTemplate">
            <summary>
            Current cell's template.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellSharedData">
            <summary>
            PdfCells Shared Data
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.CellSharedData.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.DataRowNumber">
            <summary>
            Cell's overall row number value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.GroupNumber">
            <summary>
            Cell's group number value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.PdfColumnAttributes">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.PdfDoc">
            <summary>
            PDF Document object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.PdfWriter">
            <summary>
            PdfWriter object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.SummarySettings">
            <summary>
            Pages and groups summary values settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellSharedData.Template">
            <summary>
            Main table's template
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CompressionSettings">
            <summary>
            Compression settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CompressionSettings.CompressionLevel">
            <summary>
            A possible compression level.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CompressionSettings.EnableFullCompression">
            <summary>
            Applies Full Compression. Content streams will be compressed, but so will some other objects, 
            such as the cross-reference table. This is only possible since PDF version 1.5.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CompressionSettings.EnableCompression">
            <summary>
            Applies Normal Compression
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentPermissions">
            <summary>
            Document Permissions
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowPrinting">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowModifyContents">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowCopy">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowModifyAnnotations">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowFillIn">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowScreenReaders">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowAssembly">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPermissions.AllowDegradedPrinting">
            <summary>
            This setting will be ignored, if no EncryptionType is used or at least EditPassword is not set (ReadPassword can be null).
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.EncryptionType">
            <summary>
            EncryptionType Values
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.EncryptionType.PasswordEncryption">
            <summary>
            Using the AES algorithm to encrypt the pdf file.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.EncryptionType.PublicKeyEncryption">
            <summary>
            Using a personal information exchange file to encrypt athe pdf file.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.FileAttachment">
            <summary>
            Adding a file attachment at the document level.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FileAttachment.FilePath">
            <summary>
            File's path.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.FileAttachment.Description">
            <summary>
            File's description.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.GroupsPreferences">
            <summary>
            Groups Preferences.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.GroupsPreferences.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.GroupType">
            <summary>
            Sets the GroupType.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.ShowOneGroupPerPage">
            <summary>
            If true, each group will be printed on a new page.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.RepeatHeaderRowPerGroup">
            <summary>
            Sets the visibility of the each group's main table's header row.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.ShowGroupingPropertiesInAllRows">
            <summary>
            If set to false and GroupType is set to IncludeGroupingColumns, 
            only first row of the each group will show the grouping properties values.
            If GroupType is set to HideGroupingColumns, this property will be ignored.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.SpacingBeforeAllGroupsSummary">
            <summary>
            Spacing before the main table. Its default value is 15f.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.SpacingAfterAllGroupsSummary">
            <summary>
            Spacing after the main table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.GroupsPreferences.NewGroupAvailableSpacingThreshold">
            <summary>
            Starts a new page if there's not enough room for the new group at the end of the page.
            Its default value is 150f. Set it to zero to ignore this rule.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.GroupType">
            <summary>
            GroupTypes definitions.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.GroupType.HideGroupingColumns">
            <summary>
            Hides all of the grouping columns from the report.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.GroupType.IncludeGroupingColumns">
            <summary>
            Shows all of the grouping columns int the report too.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PageOrientation">
            <summary>
            PageOrientation values
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PageOrientation.Portrait">
            <summary>
            Portrait Orientation.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PageOrientation.Landscape">
            <summary>
            Landscape Orientation.
            In this case, you need to set the PdfRptPrintingPreferences.PickTrayByPdfSize to true.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PagesDirection">
            <summary>
            determine the predominant order of the pages.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PagesDirection.DirectionL2R">
            <summary>
            Left to right (the default).
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PagesDirection.DirectionR2L">
            <summary>
            Right to left, including vertical writing systems such as Chinese, Japanese, and Korean.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.MainTablePreferences">
            <summary>
            Holds MainTable's general properties
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.WidthPercentage">
            <summary>
            Width percentage of the main table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.ColumnsWidthsType">
            <summary>
            Determines the WidthType of the columns.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.ShowHeaderRow">
            <summary>
            Sets the visibility of the main table's header row.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.SplitLate">
            <summary>
            Split the cells of the first row that doesn't fit the page.
            If true, a that row doesn't fit on the page, its complete row will be forwarded to the next page.
            If false, rows that are too high to fit on a page will be dropped from the table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.SplitRows">
            <summary>
            If true, splits rows that are forwarded to the next page but that still 
            don't fit because the row height exceeds the available page height.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.KeepTogether">
            <summary>
            If true, the table will be kept on one page if it fits, by forcing a 
            new page if it doesn't fit on the current page. 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.SpacingBefore">
            <summary>
            Spacing before the main table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.SpacingAfter">
            <summary>
            Spacing after the main table.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.NumberOfDataRowsPerPage">
            <summary>
            If sets to zero, NumberOfDataRowsPerPage will be calculated automatically, otherwise as specified.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.TableType">
            <summary>
            Sets the TableType. Its default value is a noraml PdfGrid.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MainTablePreferences.HorizontalStackPanelPreferences">
            <summary>
            If TableType is set to HorizontalStackPanel, here you can define its preferences such as
            number of columns per row.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Core.Contracts"/> namespace contains main interfaces of the PdfRpt.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.BasicTemplate">
            <summary>
            Basic predefined templates
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.AppleOrchardTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.CoverFieldTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.LiliacsInMistTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.MochaTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.NullTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.OceanicaTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.ProfessionalTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.RainyDayTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.SandAndSkyTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.SilverTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.SimpleTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.SlateTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.SnowyPineTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.AutumnTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.BlackAndBlue1Template">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.BlackAndBlue2Template">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.BrownSugarTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.ClassicTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.BasicTemplate.ColorfulTemplate">
            <summary>
            A predefined template.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField">
            <summary>
            Displaying current cell's data as an Image. It's useful for displaying image records/blobs of a database.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displaying current cell's data as an Image.
            </summary>
            <param name="defaultImageFilePath">Default image will be used in case of null images</param>
            <param name="fitImages">Set fitImages to true to fit the image to the cell</param>        
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.#ctor">
            <summary>
            Displaying current cell's data as an Image.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ByteArrayImageField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.HyperlinkField">
            <summary>
            Displaying current cell's data as a hyperlink
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.HyperlinkField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.HyperlinkField.#ctor(iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
            ctor.
            </summary>
            <param name="foreColor"></param>
            <param name="fontUnderline"></param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.HyperlinkField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.HyperlinkField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.HyperlinkField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.HyperlinkField.TextPropertyName">
            <summary>
            If you don't set TextPropertyName, current cell's text will be used as hyperlink's text.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.HyperlinkField.NavigationUrlPropertyName">
            <summary>
            If you don't set NavigationUrlPropertyName, current cell's text will be used as hyperlink's target url.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.TextBlockField">
            <summary>
            Displaying current cell's data as text
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.TextBlockField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.TextBlockField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.TextBlockField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.TextBlockField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CertificateFile">
            <summary>
            Holds the CertificateFile's info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CertificateFile.PfxPassword">
            <summary>
            Certificate file's password
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CertificateFile.PfxPath">
            <summary>
            Certificate file's path
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CertificateFile.AppendSignature">
            <summary>
            If sets to true the signature and all the other content will be added as a
            new revision thus not invalidating existing signatures.
            Set it to true if you don't want to lose the EncryptionOptions.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DiagonalWatermark">
            <summary>
            A watermark text to display
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.DiagonalWatermark.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DiagonalWatermark.Text">
            <summary>
            Watermark text to display
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DiagonalWatermark.RunDirection">
            <summary>
            Possible run direction values, left-to-right or right-to-left
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DiagonalWatermark.Font">
            <summary>
            Custom font's definitions
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DiagonalWatermark.FillOpacity">
            <summary>
            Transparency setting. Default FillOpacity is 0.5f.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DiagonalWatermark.StrokeOpacity">
            <summary>
            Transparency setting. Default StrokeOpacity is 1f.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.Encryption">
            <summary>
            Sets the encryption options for this document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Encryption.PublicKeyEncryption">
            <summary>
            Using a personal information exchange file to encrypt athe pdf file.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Encryption.PasswordEncryption">
            <summary>
            Using the AES algorithm to encrypt the pdf file.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Encryption.EncryptionType">
            <summary>
            Sets the in use encryption algorithm.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Encryption.DocumentPermissions">
            <summary>
            Document Permissions.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PagePreferences">
            <summary>
            Pages Preferences
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.Margins">
            <summary>
            Sets Margins of the PDF Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.RunDirection">
            <summary>
            RunDirection sets the special setting of RTL or LTR languages automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.Size">
            <summary>
            The paper size.
            The iTextSharp.text.PageSize class contains a number of read only rectangles representing the most common paper sizes,
            such as PageSize.A4, PageSize.LETTER, etc.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.Orientation">
            <summary>
            Indicates pages ordination, portrait or landscape
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.BackgroundImageFilePath">
            <summary>
            Background image's file path.
            Leave it as null or empty if you don't want to use it.
            AlternatingRowBackgroundColor and RowBackgroundColor of RptTemplate should be set to null to make this image visible.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.BackgroundImagePosition">
            <summary>
            Gets or sets the absolute position of the Background image.
            If it's set to null, the image will be painted at the center of the page.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.PagesBackgroundColor">
            <summary>
            Setting Page Background Color.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PagePreferences.CacheHeader">
            <summary>
            You can define different headers for each page. 
            If all of the headers of the document's pages are the same, set this value to true, to optimize the performance and document size.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PasswordEncryption">
            <summary>
            Using the AES algorithm to encrypt the pdf file.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PasswordEncryption.ReadPassword">
            <summary>
            The user password.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PasswordEncryption.EditPassword">
            <summary>
            The owner password.
            It can't be null, otherwise these settings will be ignored.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PublicKeyEncryption">
            <summary>
            Using a personal information exchange file to encrypt the pdf file.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PublicKeyEncryption.PfxPassword">
            <summary>
            Certificate file's password
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PublicKeyEncryption.PfxPath">
            <summary>
            Certificate file's path
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.Signature">
            <summary>
            Hold's digital signature's info.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Signature.CertificateFile">
            <summary>
            Sets the CertificateFile's info.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Signature.SigningInfo">
            <summary>
            Sets the signing reason.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Signature.TsaClient">
            <summary>
            Timestamp Authority Client's info.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Signature.VisibleSignature">
            <summary>
            VisibleSignature's info.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.SigningInfo">
            <summary>
            Holds the signing related info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SigningInfo.Reason">
            <summary>
            Sets the signing reason
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SigningInfo.Contact">
            <summary>
            Sets the signing contact
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SigningInfo.Location">
            <summary>
            Sets the signing location
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.SummaryLocation">
            <summary>
            Summary Cell's Location
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.SummaryLocation.AtFirstDefinedAggregateCell">
            <summary>
            It will use the first cell before the first defined aggregate cell.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.SummaryLocation.AtRowNumberColumn">
            <summary>
            Displays summary at end of RowNumberColumn
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.SummaryLocation.AtSpecifiedLabelColumnProperty">
            <summary>
            It will use the specified LabelColumnProperty value.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.TsaClient">
            <summary>
            Timestamp Authority Client's info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.TsaClient.Url">
            <summary>
            URL of the Time Stamp Authority
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.TsaClient.UserName">
            <summary>
            TSA Username
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.TsaClient.Password">
            <summary>
            TSA password
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.VisibleSignature">
            <summary>
            Holds VisibleSignature's info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.CustomText">
            <summary>
            Sets the signature text identifying the signer.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.Position">
            <summary>
            Position and dimension of the field in the page.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.PageNumberToShowSignature">
            <summary>
            The page to place the field. The fist page is 1.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.UseLastPageToShowSignature">
            <summary>
            If it sets to true, value of the Page property will be ignored.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.ImagePath">
            <summary>
            Sets the background image for the layer 2.
            It can be null or empty.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.RunDirection">
            <summary>
            Possible run direction values, left-to-right or right-to-left
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.VisibleSignature.Font">
            <summary>
            Custom font's definitions
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.TableColumnWidthType">
            <summary>
            Determines the WidthType of the column.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableColumnWidthType.Relative">
            <summary>
            Each column has a relative width equal to 1.
            Example: Relative values = 2, 1, 1. This means that you want to divide the width of the table into four parts (2 + 1 + 1):
            two parts for the first column, one part for columns two and three.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableColumnWidthType.Absolute">
            <summary>
            The absolute width expressed in user space units.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableColumnWidthType.FitToContent">
            <summary>
            Tries to resize the columns automatically.
            All of the specified widths will be ignored.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.TableColumnWidthType.EquallySized">
            <summary>
            Equally sized columns.
            All of the specified widths will be ignored.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PrintingPreferences">
            <summary>
            Indicates default values of print dialog box.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PrintingPreferences.PrintScaling">
            <summary>
            Print scaling values.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PrintingPreferences.PrintSide">
            <summary>
            Indicates whether duplex printing should be used or not.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PrintingPreferences.PickTrayByPdfSize">
            <summary>
            If set to true, the check box in the Print dialog box associated with input paper tray will be checked 
            (Automatically check the "Choose paper source by PDF page size" checkbox on the print dialog). 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PrintingPreferences.NumberOfCopies">
            <summary>
            Supported values are the integers 2 through 5. Values outside this range are ignored.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PrintingPreferences.ShowPrintDialogAutomatically">
            <summary>
            Show the standard print dialog after opening the document automatically.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfVersion">
            <summary>
            Supported PDF versions values. Select at least PDF version 1.5, If you want the best compression support.
            http://en.wikipedia.org/wiki/Portable_Document_Format
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version12">
            <summary>
            Adobe Reader 3.0+ supports PDF version 1.2
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version13">
            <summary>
            Adobe Reader 4.0+ supports PDF version 1.3
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version14">
            <summary>
            Adobe Reader 5.0+ supports PDF version 1.4
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version15">
            <summary>
            Adobe Reader 6.0+ supports PDF version 1.5
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version16">
            <summary>
            Adobe Reader 7.0+ supports PDF version 1.6
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfVersion.Version17">
            <summary>
            Adobe Reader 8.0+ supports PDF version 1.7
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PrintScaling">
            <summary>
            page scaling values
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PrintScaling.None">
            <summary>
            Indicates no page scaling.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PrintScaling.Default">
            <summary>
            Indicates the conforming Reader’s default print scaling.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PrintSide">
            <summary>
            Indicates whether duplex printing should be used or not
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PrintSide.Simplex">
            <summary>
            print single-sided.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PrintSide.DuplexFlipShortEdge">
            <summary>
            duplex printing, flip on the short edge of the sheet.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PrintSide.DuplexFlipLongEdge">
            <summary>
            duplex printing, flip on the long edge of the sheet
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ViewerPageLayout">
            <summary>
            Page layout values. Specifies the page layout to be used when a document is opened in Adobe Reader.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.SinglePage">
            <summary>
            Displays one page at a time (this is the default).
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.OneColumn">
            <summary>
            Displays the pages in one column.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.TwoColumnLeft">
            <summary>
            Displays the pages in two columns, with odd numbered pages on the left.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.TwoColumnRight">
            <summary>
            Displays the pages in two columns, with odd numbered pages on the right.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.TwoPageLeft">
            <summary>
            Displays the pages two at a time, with odd numbered pages on the left.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageLayout.TwoPageRight">
            <summary>
            Displays the pages two at a time, with oddnumbered pages on the right.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ViewerPageMode">
            <summary>
            PageMode values. Sets different panels available in Adobe Reader.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.UseNone">
            <summary>
            None of the tabs on the left are selected (this is the default).
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.UseOutlines">
            <summary>
            The document outline is visible (bookmarks).
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.UseThumbs">
            <summary>
            Images corresponding with the page are visible.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.FullScreen">
            <summary>
            Full-screen mode; no menu bar, window controls, or any other windows are visible.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.UseOC">
            <summary>
            The optional content group panel is visible (since PDF 1.5).
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPageMode.UseAttachments">
            <summary>
            The attachments panel is visible (since PDF 1.6).
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ViewerPreferences">
            <summary>
            select toolbar items that must be shown or hidden. these values can be or'ed.
            </summary>    
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.UseNone">
            <summary>
            Not set value
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.HideToolBar">
            <summary>
            Hides the toolbar when the document is opened.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.HideMenubar">
            <summary>
            Hides the menu bar when the document is opened.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.HideWindowUI">
            <summary>
            Hides UI elements in the document’s window (such as scrollbars and navigation controls), 
            leaving only the document’s contents displayed.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.FitWindow">
            <summary>
            Resizes the document’s window to fit the size of the first displayed page.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.CenterWindow">
            <summary>
            Puts the document’s window in the center of the screen.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.ViewerPreferences.DisplayDocTitle">
            <summary>
            Displays the title that was added in the metadata in the top bar (otherwise the filename is displayed).
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfViewerPreferences">
            <summary>
            Specifies the Adobe Reader's settings when a document is opened.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.PageLayout">
            <summary>
            Page layout values. Specifies the page layout to be used when a document is opened in Adobe Reader.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.PageMode">
            <summary>
            PageMode values. Sets different panels available in Adobe Reader.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.NonFullScreenPageMode">
            <summary>
            specifies how to display the document on exiting full-screen mode.
            These options only make sense if the page mode is full screen.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.ViewerPreferences">
            <summary>
            select toolbar items that must be shown or hidden. these values can be or'ed.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.PagesDirection">
            <summary>
            determine the predominant order of the pages.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.ZoomPercent">
            <summary>
            Setting the initial zoom of the PDF document. 
            Only advanced PDF viewers such as Adobe Reader, understand this value.       
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.PdfViewerPreferences.PdfVersion">
            <summary>
            Sets the PdfVersion. Select at least PDF version 1.5, If you want the best compression support.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.AggregateException">
            <summary>
            Represents one or more errors that occur during application execution.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.AggregateException.#ctor(System.Exception[])">
            <summary>
            Creates a new <see cref="T:PdfRpt.Core.Helper.AggregateException"/> containing inner exceptions
            </summary>
            <param name="innerExceptions">The exceptions that were the cause of this exception</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Creates a new <see cref="T:PdfRpt.Core.Helper.AggregateException"/> containing inner exceptions
            </summary>
            <param name="innerExceptions">The exceptions that were the cause of this exception</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.AggregateException.#ctor(System.String,System.Exception[])">
            <summary>
            Creates a new <see cref="T:PdfRpt.Core.Helper.AggregateException"/> containing inner exceptions with a message
            </summary>
            <param name="message">The exception message</param>
            <param name="innerExceptions">The exceptions that were the cause of this exception</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Creates a new <see cref="T:PdfRpt.Core.Helper.AggregateException"/> containing inner exceptions with a message
            </summary>
            <param name="message">The exception message</param>
            <param name="innerExceptions">The exceptions that were the cause of this exception</param>
        </member>
        <member name="P:PdfRpt.Core.Helper.AggregateException.InnerExceptions">
            <summary>
            One or more errors that occurred
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.ApplyDataAnnotations">
            <summary>
            Applies Annotations to a list of PdfColumnAttributes.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ApplyDataAnnotations.ApplyPropertyDataAnnotations(PdfRpt.Core.Contracts.IDataSource,System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},System.Boolean)">
            <summary>
            Applies Annotations to a list of PdfColumnAttributes.
            </summary>
            <param name="bodyDataSource">Data source</param>        
            <param name="result">A list of PdfColumnAttributes</param>
            <param name="areColumnsAdHoc">It's possible to remove the MainTableColumns part completely</param>
        </member>
        <member name="T:PdfRpt.Core.Helper.BackgroundImageTemplate">
            <summary>
            A helper class to add a background image to each page of the current document
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.BackgroundImageTemplate.ApplyBackgroundImage(iTextSharp.text.Document)">
            <summary>
            Apply background image to the added templates
            </summary>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.BackgroundImageTemplate.InitBackgroundImageTemplate(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Create an empty template
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.BackgroundImageTemplate.ReserveBackgroundImageSpace(iTextSharp.text.pdf.PdfWriter)">
            <summary>
            Add an empty template to each page
            </summary>
            <param name="writer">PdfWriter</param>
        </member>
        <member name="P:PdfRpt.Core.Helper.BackgroundImageTemplate.PageSetup">
            <summary>
            Document settings
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.DumpNestedProperties">
            <summary>
            A helper class for dumping nested property values
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DumpNestedProperties.DumpPropertyValues(System.Object,System.String,System.Int32)">
            <summary>
            Dumps Nested Property Values
            </summary>
            <param name="data">an instance object</param>
            <param name="parent">parent object's name</param>
            <param name="dumpLevel">how many levels should be searched</param>
            <returns>Nested Property Values List</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.ElementsWidth">
            <summary>
            This class tries to find some Pdf elements width, before rendering.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ElementsWidth.AutoResizeTableColumns(PdfRpt.Core.Contracts.PdfGrid)">
            <summary>
            Tries to auto resize the specified table columns.
            </summary>
            <param name="table">pdf table</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.ElementsWidth.GetCellWidth(iTextSharp.text.pdf.PdfPCell)">
            <summary>
            Tries to find the PdfPCell's width, before rendering
            </summary>
            <param name="cell">pdf cell</param>
            <returns>its estimated width</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ElementsWidth.GetPhraseWidth(iTextSharp.text.Phrase)">
            <summary>
            Tries to find the Phrase's width, before rendering
            </summary>
            <param name="phrase">the phrase</param>
            <returns>its estimated width</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.DiagonalWatermarkManager">
            <summary>
            A class to encapsulate the diagonal watermark related methods.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DiagonalWatermarkManager.ApplyWatermark(iTextSharp.text.Document)">
            <summary>
            Apply Watermark to the added templates
            </summary>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.DiagonalWatermarkManager.InitWatermarkTemplate(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Create an empty template
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.DiagonalWatermarkManager.ReserveWatermarkSpace(iTextSharp.text.pdf.PdfWriter)">
            <summary>
            Add an empty template to each page
            </summary>
            <param name="writer">PdfWriter</param>
        </member>
        <member name="P:PdfRpt.Core.Helper.DiagonalWatermarkManager.PageSetup">
            <summary>
            Document settings
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.ExcelHelper">
            <summary>
            ExcelHelper class.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.ExcelHelper.MtuPerPixel">
            <summary>
            MTU PER PIXEL
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.ColumnWidth2Pixel(OfficeOpenXml.ExcelWorksheet,System.Double)">
            <summary>
            convert width to pixel
            </summary>
            <param name="ws">ExcelWorksheet</param>
            <param name="excelColumnWidth">ColumnWidth</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.Pixel2ColumnWidth(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            convert pixel to width
            </summary>
            <param name="ws">ExcelWorksheet</param>
            <param name="pixels">pixels</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.RowHeight2Pixel(System.Double)">
            <summary>
            convert height to pixel
            </summary>
            <param name="excelRowHeight">RowHeight</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.Pixel2RowHeight(System.Int32)">
            <summary>
            convert height to pixel
            </summary>
            <param name="pixels">pixels</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.Mtu2Pixel(System.Int32)">
            <summary>
            convert MTU to pixel
            </summary>
            <param name="mtus">mtus</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExcelHelper.Pixel2Mtu(System.Int32)">
            <summary>
            convert pixel to MTU
            </summary>
            <param name="pixels">pixels</param>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.ExporterManager">
            <summary>
            IPdfReportDataExporter Manager Class
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExporterManager.#ctor(PdfRpt.Core.Contracts.SharedData)">
            <summary>
            ctor.
            </summary>
            <param name="sharedData">holds shared info between rendering classes.</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExporterManager.ApplyExporter(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.LastRenderedRowData)">
            <summary>
            Calls exporter.OnRowAdded
            </summary>
            <param name="finalRowDataList">row's data</param>
            <param name="currentRowInfoData">row's info</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExporterManager.InitExporter">
            <summary>
            Calls exporter.OnInitDocument.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.ExporterManager.CloseExporter">
            <summary>
            Calls exporter.OnCloseDocument.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.GradientBackground">
            <summary>
            Draws a rectangular gradient background color.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.GradientBackground.ApplyGradientBackground(PdfRpt.Core.Contracts.RowType,PdfRpt.Core.Contracts.CellSharedData,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
            Draws a rectangular gradient background color.
            </summary>
            <param name="pdfRowType">Main table's row types</param>
            <param name="sharedData">PdfCells Shared Data</param>        
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.GradientBackground.DrawGradientBackground(iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],iTextSharp.text.BaseColor,iTextSharp.text.BaseColor)">
            <summary>
            Draws a rectangular gradient background color.
            </summary>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="startColor">Gradient's Start Color</param>
            <param name="endColor">Gradient's End Color</param>
        </member>
        <member name="T:PdfRpt.Core.Helper.Guard">
            <summary>
            Guard class
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.CheckDirectoryExists(System.String)">
            <summary>
            Does the specified directory exist?
            </summary>
            <param name="fileName">file path</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.CheckFileExists(System.String)">
            <summary>
            Does the specified file exist?
            </summary>
            <param name="fileName">file path</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.ToSafeDouble(System.Object,System.Double)">
            <summary>
            Tries to convert an object to double.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.ToSafeString(System.Object,System.String)">
            <summary>
            A safe ToString method.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.GetSafeRunDirection(System.Nullable{PdfRpt.Core.Contracts.PdfRunDirection})">
            <summary>
            A safe RunDirection value
            </summary>
            <param name="runDirection">Possible run direction values, left-to-right or right-to-left</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.SafeUsingBlock``1(``0,System.Action{``0})">
            <summary>
            This method allows you to overcome the limitations of the using block
            (see http://msdn.microsoft.com/en-us/library/aa355056.aspx for more information) by being
            able to catch exceptions in the block and exceptions from the dispose method and if
            both occur throw an <see cref="T:PdfRpt.Core.Helper.AggregateException"/>.
            </summary>
            <remarks>
            <para>
            Note that the semantic of this block is slightly different to a normal using block, since
            keywords like return will not "return" the current method; rather they will return the
            action delegate you pass to the method.
            </para>
            <example>
            Here is an example of how you could use this:
            <code>
            new MyWcfClient().SafeUsingBlock(myWcfClient =&gt;
            {
                myWcfClient.MyServiceMethod();
            });
            </code>
            </example>
            </remarks>
            <typeparam name="TDisposable">The <see cref="T:System.IDisposable"/> type</typeparam>
            <param name="disposable">The disposable object</param>
            <param name="action">A function that will run as "using block"</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.SafeUsingBlock``2(``0,System.Action{``1},System.Func{``0,``1})">
            <summary>
            Internal implementation of SafeUsingBlock that enables custom unwrapping of the object
            to pass to the safe using block action.
            </summary>
            <typeparam name="TDisposable">The disposable type</typeparam>
            <typeparam name="T">The type passed to the action</typeparam>
            <param name="disposable">The disposable object</param>
            <param name="action">The type passed to the action</param>
            <param name="unwrapper">
            The unwrapper function that takes the disposable and returns the object to pass to the action
            </param>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.ApproxEquals(System.Single,System.Single)">
            <summary>
            Compares two float numbers for equality.
            </summary>
            <param name="f1">number one</param>
            <param name="f2">number two</param>
            <returns>True, if two numbers are approximately equal.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.Guard.ApproxEquals(System.Double,System.Double)">
            <summary>
            Compares two double numbers for equality.
            </summary>
            <param name="d1">number one</param>
            <param name="d2">number two</param>
            <returns>True, if two numbers are approximately equal.</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.HeaderFooterManager">
            <summary>
            A class to encapsulate header and footer related methods.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HeaderFooterManager.AddFooter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">Rows summaries data</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.HeaderFooterManager.AddHeader(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Fires when a new page is being added
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.HeaderFooterManager.ApplyFooter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires before closing the document
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">Rows summaries data</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.HeaderFooterManager.InitFooter(iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when the document is opened
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="columnCellsSummaryData">Rows summaries data</param>
        </member>
        <member name="P:PdfRpt.Core.Helper.HeaderFooterManager.CacheHeader">
            <summary>
            You can define different headers for each page. 
            If all of the headers of the document's pages are the same, set this value to true, to optimize the performance and document size.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HeaderFooterManager.CurrentRowInfoData">
            <summary>
            Stores the last rendered row's data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HeaderFooterManager.PdfRptFooter">
            <summary>
            Optional custom footer of the pages.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HeaderFooterManager.ColumnSummaryCellsData">
            <summary>
            Rows summaries data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.HeaderFooterManager.PdfRptHeader">
            <summary>
            Optional custom header of the pages.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Core.Helper"/> namespace contains some helper classes.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.PdfConformance">
            <summary>
            Applies PDF/A Conformance.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.PdfConformance.PdfXToPdfA">
            <summary>
            PdfX To PdfA Converter
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfConformance.SetConformanceLevel">
            <summary>
            Sets PDF/A Conformance Level.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfConformance.SetColorProfile">
            <summary>
            Sets PDF/A Conformance ColorProfile.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.PdfConformance.PdfWriter">
            <summary>
            PdfWriter Object.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.PdfConformance.PageSetup">
            <summary>
            Document settings.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.PropertyDataAnnotations">
            <summary>
            Processing custom data annotations.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetAggregateFunctionAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnAggregateFunctionAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>AggregateFunction</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetCellsHorizontalAlignmentAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnCellsHorizontalAlignmentAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>CellsHorizontalAlignment</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnIsVisibleAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnIsVisibleAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>IsVisible</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnOrderAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnOrderAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>Order</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnWidthAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnPdfRptColumnWidthAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnPropertyNameAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnPropertyNameAttribute data.
            Processing order is checking PdfRptColumnPropertyNameAttribute first, then DisplayNameAttribute and finally DescriptionAttribute.
            If none of these is available, the actual property name will be returned.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>PropertyName</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetEnumStringValue(System.Enum)">
            <summary>
            Getting string attribute of Enum's value.
            Processing order is checking DisplayNameAttribute first and then DescriptionAttribute.
            If none of these is available, value.ToString() will be returned.
            </summary>
            <param name="value">enum value</param>
            <returns>string attribute of Enum's value</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetNullDisplayTextAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns DisplayFormatAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>NullDisplayText</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetDataFormatStringAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns DisplayFormatAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>DataFormatString</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.IsStronglyTypedListDataSource(PdfRpt.Core.Contracts.IDataSource)">
            <summary>
            Determines whether a IPdfReportDataSource is type of StronglyTypedListDataSource or not.
            </summary>
            <param name="bodyDataSource">data source</param>
            <returns>true/false</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetPropertiesInfoOfStronglyTypedListDataSource(PdfRpt.Core.Contracts.IDataSource)">
            <summary>
            Gets PropertiesInfo[] Of StronglyTypedListDataSource.
            </summary>
            <param name="bodyDataSource">data source</param>
            <returns>properties list</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetFieldsInfoOfStronglyTypedListDataSource(PdfRpt.Core.Contracts.IDataSource)">
            <summary>
            Gets FieldInfo[] Of StronglyTypedListDataSource
            </summary>
            <param name="bodyDataSource">data source</param>
            <returns>Fields Info</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetPdfRptColumnTemplateAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns ColumnTemplateAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>A typeof(IPdfColumnItemsTemplate) value.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetPdfRptColumnCustomAggregateFunctionAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnCustomAggregateFunctionAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>A typeof(IAggregateFunction) value.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnIsCalculatedFieldAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns PdfRptColumnIsVisibleAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>IsCalculated</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetCalculatedFieldFormulaAttribute(System.Reflection.FieldInfo[],System.String)">
            <summary>
            Returns CalculatedFieldFormulaAttribute data.
            </summary>
            <param name="fieldsInfo">current object's FieldInfo[]</param>
            <param name="forPropertyName">corresponding property</param>
            <returns>CalculatedFieldFormula</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetColumnIncludeInGroupingAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns IncludeInGroupingAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>IncludeInGrouping</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetIncludedGroupFieldEqualityComparerAttribute(System.Reflection.FieldInfo[],System.String)">
            <summary>
            Returns IncludedGroupFieldEqualityComparerAttribute data.
            </summary>
            <param name="fieldsInfo">current object's FieldInfo[]</param>
            <param name="forPropertyName">corresponding property</param>
            <returns>IncludedGroupFieldEqualityComparer</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetFixedHeightAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns FixedHeightAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>FixedHeight</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyDataAnnotations.GetMinimumHeightAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns MinimumHeightAttribute data.
            </summary>
            <param name="info">Property metadata info</param>
            <returns>MinimumHeight</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.StreamHelper">
            <summary>
            Embedded resources helper class.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.StreamHelper.GetResourceByName(System.String)">
            <summary>
            Reads an embedded resource
            </summary>
            <param name="fileName">embedded resource file</param>
            <returns>embedded resource</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.StreamHelper.StreamToBytes(System.IO.Stream)">
            <summary>
            Converts StreamToBytes 
            </summary>
            <param name="input">stream</param>
            <returns>array of bytes</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.StreamHelper.ReopenForWriting(System.IO.Stream)">
            <summary>
            Tries to Reopen the stream for writing.
            </summary>
            <param name="stream">input stream</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.StreamHelper.ReopenForReading(System.IO.Stream)">
            <summary>
            Tries to Reopen the stream for reading.
            </summary>
            <param name="stream">input stream</param>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.Core.Security.EncryptionWorker">
            <summary>
            Applies PDF Encryption Options
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Security.EncryptionWorker.ApplyEncryption">
            <summary>
            Enable Encryption
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Security.EncryptionWorker.ApplySignature(System.IO.Stream)">
            <summary>
            Applies a digital signature to a document
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Security.EncryptionWorker.DocumentSecurity">
            <summary>
            Sets the encryption options for this document.
            Leave it as null if you don't want to use it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Security.EncryptionWorker.PdfDoc">
            <summary>
            Document object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Security.EncryptionWorker.PdfWriter">
            <summary>
            PdfWriter Object
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Security.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Core.Security"/> namespace contains encryption and digital signature implantations of the PdfRpt.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Security.CustomPdfReader">
            <summary>
            CustomPdfReader to be able to work with streams.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Security.CustomPdfReader.#ctor(System.IO.Stream,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
            CustomPdfReader to be able to work with streams.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Security.SignatureWriter">
            <summary>
            Applies a digital signature to a document
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.IO.Stream,System.Byte[])">
            <summary>
            Applies a digital signature to a document
            </summary>
            <param name="inputPdfStream">Input/Output pdf file's stream</param>        
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.IO.Stream,PdfRpt.Core.Security.PfxData)">
            <summary>
            Applies a digital signature to a document
            </summary>
            <param name="inputPdfStream">Input/Output pdf file's stream</param>        
            <param name="pfxData">The Personal Information Exchange File Info which is used to encrypt the file.</param>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.String,System.String,System.Byte[])">
            <summary>
            Applies a digital signature to a document
            </summary>        
            <param name="inputPdfPath">Input pdf file's path</param>
            <param name="outputPdfPath">Output/Signed pdf file's path</param>
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Applies a digital signature to a document
            </summary>
            <param name="inputPdfStream">Input pdf file's stream</param>
            <param name="outputPdfStream">Output/Signed pdf file's stream</param>
            <param name="ownerPassword">the password to read the document</param>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.String,System.String,PdfRpt.Core.Security.PfxData)">
            <summary>
            Applies a digital signature to a document
            </summary>        
            <param name="inputPdfPath">Input pdf file's path</param>
            <param name="outputPdfPath">Output/Signed pdf file's path</param>
            <param name="pfxData">The Personal Information Exchange File Info which is used to encrypt the file.</param>
        </member>
        <member name="M:PdfRpt.Core.Security.SignatureWriter.SignPdf(System.IO.Stream,System.IO.Stream,PdfRpt.Core.Security.PfxData)">
            <summary>
            Applies a digital signature to a document
            </summary>
            <param name="inputPdfStream">Input pdf file's stream</param>
            <param name="outputPdfStream">Output/Signed pdf file's stream</param>
            <param name="pfxData">The Personal Information Exchange File Info which is used to encrypt the file.</param>
        </member>
        <member name="P:PdfRpt.Core.Security.SignatureWriter.SignatureData">
            <summary>
            Digital signature's info
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.TableCellDefinitionsExt">
            <summary>
            PdfCellAttributes helper class.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableCellDefinitionsExt.CreateSafePdfPCell(PdfRpt.Core.Contracts.CellAttributes,PdfRpt.Core.Contracts.IColumnItemsTemplate)">
            <summary>
            Create a PdfPCell based on the PdfCell Attributes.
            </summary>
            <param name="pdfRptTableCellDefinition">PdfCell Attributes</param>
            <param name="defaultItemTemplate">Default ItemTemplate</param>
            <returns>A PdfPCell</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableCellDefinitionsExt.ApplyStyles(iTextSharp.text.pdf.PdfPCell,PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Applies PdfCellAttributes to a PdfPCell.
            </summary>
            <param name="pdfPCell">A PdfPCell.</param>
            <param name="pdfRptTableCellDefinition">PdfCell Attributes</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableCellDefinitionsExt.MapBasicPropertiesTo(PdfRpt.Core.Contracts.CellBasicProperties,PdfRpt.Core.Contracts.CellBasicProperties)">
            <summary>
            Maps ItemTemplate.BasicProperties to pdfRptTableCellDefinition.BasicProperties.
            </summary>
            <param name="fromPdfCellAttributes">From PdfCell Attributes</param>
            <param name="toPdfCellAttributes">To PdfCell Attributes</param>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.ImageFilePathField">
            <summary>
            Displaying current cell's data as an Image. It's assumed that this data point to the physical image's path on the disk.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displaying current cell's data as an Image. It's assumed that this data point to the physical image's path on the disk.
            </summary>        
            <param name="defaultImageFilePath">Default image will be used in case of missing images</param>
            <param name="fitImages">Set fitImages to true to fit the image to the cell</param>
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.#ctor">
            <summary>
            Displaying current cell's data as an Image. It's assumed that this data point to the physical image's path on the disk.
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.ImageFilePathField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.ColumnsItemsTemplates.BarcodeField">
            <summary>
            Displaying current cell's data as a Barcode
            </summary>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.BarcodeField.CellRendered(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[],PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
            <param name="attributes">Current cell's custom attributes</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.BarcodeField.#ctor(iTextSharp.text.pdf.Barcode)">
            <summary>
            Displaying current cell's data as a Barcode.
            </summary>
            <param name="barcode">An instance of iTextSharp.text.pdf.BarcodeXYZ</param>
        </member>
        <member name="M:PdfRpt.ColumnsItemsTemplates.BarcodeField.RenderingCell(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Custom cell's content template as a PdfPCell.
            </summary>
            <returns>Content as a PdfPCell</returns>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.BarcodeField.BasicProperties">
            <summary>
            Table's Cells Definitions. If you don't set this value, it will be filled by using current template's settings internally.
            </summary>
        </member>
        <member name="P:PdfRpt.ColumnsItemsTemplates.BarcodeField.ConditionalFormatFormula">
            <summary>
            Defines the current cell's properties, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentSecurity">
            <summary>
            Sets the encryption options for this document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentSecurity.EncryptionPreferences">
            <summary>
            Sets the encryption preferences for this document.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentSecurity.DigitalSignature">
            <summary>
            Sets the digital signature's info.
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.AdHocColumnsConventions">
            <summary>
            If you don't set PdfColumnsDefinitions, list of the main table's columns will be extracted from MainTableDataSource automatically.
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.ShowRowNumberColumn">
            <summary>
            Sets the visibility of auto generated row # column.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.RowNumberColumnCaption">
            <summary>
            Sets the caption of auto generated row # column.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.TypesDisplayFormatFormulas">
            <summary>
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.ColumnNamesDisplayFormatFormulas">
            <summary>
            Here you can control how cells should be rendered based on their column names.
            ColumnNamesDisplayFormatFormulas has higher priority.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.TypesColumnItemsTemplates">
            <summary>
            Custom template of the in use property, controls how and what should be rendered in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            ColumnNamesItemsTemplates has higher priority.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.ColumnNamesItemsTemplates">
            <summary>
            Custom template of the in use property, controls how and what should be rendered based on their column names in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.TypesAggregateFunctions">
            <summary>
            Here you can assign an AggregateFunction to the specific data type.
            ColumnNamesAggregateFunctions has higher priority.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.AdHocColumnsConventions.ColumnNamesAggregateFunctions">
            <summary>
            Here you can assign an AggregateFunction to the specific column name.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IPageFooter">
            <summary>
            Defines custom footer of the each page.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IPageFooter.DocumentOpened(iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IPageFooter.PageFinished(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IPageFooter.ClosingDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires before closing the document
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellData">
            <summary>
            A class to hold data of the main table's cells
            </summary>    
        </member>
        <member name="M:PdfRpt.Core.Contracts.CellData.PropertyNameEquals``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether PropertyName of the this instance and another specified object have the same string value.             
            </summary>
            <typeparam name="TEntity">The type of the entity (interface or class).</typeparam>
            <param name="expression">The expression returning the entity property, in the form x =&gt; x.Id</param>
            <returns>true or false</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellData.PropertyIndex">
            <summary>
            Property index of the current cell
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellData.PropertyName">
            <summary>
            Property name of the current cell
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellData.PropertyValue">
            <summary>
            Property value of the current cell
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellData.PropertyType">
            <summary>
            Type of the property.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellData.FormattedValue">
            <summary>
            Formatted Property value of the current cell
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.HorizontalAlignment">
            <summary>
            Possible cells horizontal alignment values
            </summary>    
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.None">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.Center">
            <summary>
            A possible value for paragraph Element.  This specifies that the text is aligned to the center
            and extra whitespace should be placed equally on the left and right.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.Undefined">
            <summary>
            A possible value for paragraph Element. This specifies that the text is aligned to the left
            indent and extra whitespace should be placed on the right.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.Left">
            <summary>
            A possible value for paragraph Element. This specifies that the text is aligned to the left
            indent and extra whitespace should be placed on the right.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.Right">
            <summary>
            A possible value for paragraph Element. This specifies that the text is aligned to the right
            indent and extra whitespace should be placed on the left.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.Justified">
            <summary>
            A possible value for paragraph Element. This specifies that extra whitespace should be spread
            out through the rows of the paragraph with the text lined up with the left and right indent
            except on the last line which should be aligned to the left.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.HorizontalAlignment.JustifiedAll">
            <summary>
            Does the same as Justified but the last line is also spread out.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IPageHeader">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IPageHeader.RenderingGroupHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new groups is being created.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.IPageHeader.RenderingReportHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new page is being added.
            </summary>        
        </member>
        <member name="T:PdfRpt.Core.Contracts.SummaryCellAttributes">
            <summary>
            General summary settings of pages and groups
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellAttributes.ShowOnEachPage">
            <summary>
            Sets the visibility of the cell
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellAttributes.LabelColumnProperty">
            <summary>
            Sets the location of summary cell's label, based on the available visible properties.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellAttributes.LabelHorizontalAlignment">
            <summary>
            Sets summary cell's label horizontal alignment
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellAttributes.Label">
            <summary>
            Sets the value of summary cell's label
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellAttributes.SummaryLocation">
            <summary>
            Summary Cell's Location
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.SummaryCellSettings">
            <summary>
            Pages and groups summary values settings
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.SummaryCellSettings.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellSettings.OverallSummarySettings">
            <summary>
            Displaying summary values of each pages by considering the previous pages data.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellSettings.PreviousPageSummarySettings">
            <summary>
            Displaying total summary values of the previous page at beginning of the each page.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellSettings.PageSummarySettings">
            <summary>
            Displaying summary values of individual pages, regardless of the previous pages
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellSettings.AllGroupsSummarySettings">
            <summary>
            Sets summary cell's settings of the all groups. 
            It will be printed at the end of the rendering of all groups.
            It can be null if grouping is not enabled.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.MultipleColumnsPerPage">
            <summary>
            Wrapping main table in multiple columns per pages
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MultipleColumnsPerPage.ColumnsWidth">
            <summary>
            Width of the each column
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MultipleColumnsPerPage.ColumnsGap">
            <summary>
            Gap/Margin between columns
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MultipleColumnsPerPage.ColumnsPerPage">
            <summary>
            Number of the columns per pages
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MultipleColumnsPerPage.IsRightToLeft">
            <summary>
            Sets starting from right of the screen
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.MultipleColumnsPerPage.TopMargin">
            <summary>
            A gap between the main table and the header
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellAttributes">
            <summary>
            A wrapper class around important main table's cells attributes
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellAttributes.BasicProperties">
            <summary>
            Basic properties of the main table's cells
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellAttributes.ItemTemplate">
            <summary>
            Cell's template
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellAttributes.SharedData">
            <summary>
            PdfCells Shared Data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.CellAttributes.RowData">
            <summary>
            PdfCell's Raw Data
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.VerticalTextAlignment">
            <summary>
            Possible values of the vertical text alignment
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.VerticalTextAlignment.None">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.VerticalTextAlignment.Top">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.VerticalTextAlignment.Middle">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.VerticalTextAlignment.Bottom">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.VerticalTextAlignment.Baseline">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.PdfRunDirection">
            <summary>
            Possible run direction values, left-to-right or right-to-left
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfRunDirection.None">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfRunDirection.Default">
            <summary>
            Use the default run direction.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfRunDirection.LeftToRight">
            <summary>
            Use bidirectional reordering with left-to-right preferential run direction.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfRunDirection.NoBidi">
            <summary>
            Do not use bidirectional reordering.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.PdfRunDirection.RightToLeft">
            <summary>
            Use bidirectional reordering with right-to-left preferential run direction.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.CellType">
            <summary>
            Represents a main table's cell type.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.None">
            <summary>
            Undefined value
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.PreviousPageSummaryCell">
            <summary>
            Represents a main table's cell which holds the SummaryRowCell of the previous page.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.SummaryRowCell">
            <summary>
            Represents a main table's summary cell. It's not different for each page and will be calculated based on the previous pages data.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.RowNumberCell">
            <summary>
            Represents a main table's automatically generated row number cell.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.DataTableCell">
            <summary>
            Represents a main table's data cell.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.HeaderCell">
            <summary>
            Represents a main table's header's cell.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.CellType.PageSummaryCell">
            <summary>
            Represents a main table's summary cell. It's diffent for each page.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ColumnAttributes">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.ColumnAttributes.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.IsRowNumber">
            <summary>
            Creates an auto generated row # column starting from 1
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PropertyName">
            <summary>
            Field name of the current column's cells
            If it's a RowNumber or CalculatedField, it can be an arbitrary string
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PropertyIndex">
            <summary>
            Index of the property in data source columns.
            If you are not specifying the duplicate property names, ignore it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.Width">
            <summary>
            The column's width according to the PdfRptPageSetup.MainTableColumnsWidthsType value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.FixedHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            Also you can set the FixedHeight to define the height yourself.
            In this case the overflowed text with be trimmed. 
            Set FixedHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.MinimumHeight">
            <summary>
            Height of each row will be calculated automatically based on its content. 
            To assure a certain cell height, without losing any content, you can set the MinimumHeight.
            Set MinimumHeight to zero (its default value) to ignore this setting.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.IsVisible">
            <summary>
            Determines exclusion or visibility of this column.
            If GroupsPreferences.GroupType is set to PdfRptGroupType.IncludeGroupingColumns, this property will be ignored.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.Padding">
            <summary>
            Column's padding value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PaddingBottom">
            <summary>
            Column's PaddingBottom value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PaddingLeft">
            <summary>
            Column's PaddingLeft value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PaddingRight">
            <summary>
            Column's PaddingRight value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.PaddingTop">
            <summary>
            Column's PaddingTop value
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.Order">
            <summary>
            Column's order 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.HeaderCell">
            <summary>
            Column's header cell.
            It can not be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.HeadingCells">
            <summary>
            Places the optional heading cell(s) above the current column's HeaderCell.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.ColumnItemsTemplate">
            <summary>
            Custom template of the in use property, controls how and what should be rendered in each cell of this column.
            It can be null.
            If you don't set it, new DisplayAsText() template will be used automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.CellsHorizontalAlignment">
            <summary>
            Content's Horizontal alignment
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.CalculatedFieldFormula">
            <summary>
            By setting IsCalculatedField to true, you will be able to define a completely new column which is not exist in the main table's DataSource.
            CalculatedFieldFormula fires before a CalculatedField is being rendered.
            Now you can calculate the current cell's value, based on the other cells values. 
            Here IList contains actual row's cells values.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.IsCalculatedField">
            <summary>
            It enables using CalculatedFieldFormula to produce a new column based on the existing values of other columns according to the provided formula.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.AggregateFunction">
            <summary>
            Custom Aggregate Function
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.IncludeInGrouping">
            <summary>
            Defining a group of rows by including this filed in grouping
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ColumnAttributes.IncludedGroupFieldEqualityComparer">
            <summary>
            Custom comparison implementation of current and last field values of this column, to detect start of a new group
            It can be null.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentMargins">
            <summary>
            New document's margins
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMargins.Left">
            <summary>
            The margin on the left
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMargins.Right">
            <summary>
            The margin on the right
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMargins.Top">
            <summary>
            The margin on the top
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMargins.Bottom">
            <summary>
            The margin on the bottom
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentMetadata">
            <summary>
            Defines metadata information of the Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMetadata.Title">
            <summary>
            Adds the title to a Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMetadata.Subject">
            <summary>
            Adds the subject to a Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMetadata.Author">
            <summary>
            Adds the author to a Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMetadata.Application">
            <summary>
            Adds the creator to a Document.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentMetadata.Keywords">
            <summary>
            Adds the keywords to a Document.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.Events">
            <summary>
            Main table's cells and rows events
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.Events.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.DataSourceIsEmpty">
            <summary>
            Fires when there's no data to render
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.CellAdded">
            <summary>
            Fires after a cell has been added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.CellCreated">
            <summary>
            Fires when a cell is created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.DocumentClosing">
            <summary>
            Fires before closing the Document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.DocumentOpened">
            <summary>
            Fires when Document is created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.GroupAdded">
            <summary>
            Fires after a group has been added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.MainTableAdded">
            <summary>
            Fires after MainTable has been added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.MainTableCreated">
            <summary>
            Fires when MainTable is created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.RowAdded">
            <summary>
            Fires after a row has been added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.RowStarted">
            <summary>
            Fires before a row has been added.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.RowStartedInjectCustomRows">
            <summary>
            Fires before RowStartedEvent when the RowType is DataTableRow.
            Now you will have time to inject your custom and calculated rows between the predefined rows.
            Please note that your returned IList of PdfCellData should contain all of the field names
            of the actual data source.
            It can be null to stop processing.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.RowAddedInjectCustomRows">
            <summary>
            Fires after RowAddedEvent when the RowType is DataTableRow.
            Now you will have time to inject your custom and calculated rows between the predefined rows.
            Please note that your returned IList of PdfCellData should contain all of the field names
            of the actual data source.
            It can be null to stop processing.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.PageTableAdded">
            <summary>
            Fires after each part of the MainTable has been added to the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.ShouldSkipRow">
            <summary>
            Fires before a row has been added.
            </summary>
            <returns>return true to skip adding this row.</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.ShouldSkipHeader">
            <summary>
            Fires before a header row has been added.
            </summary>
            <returns>return true to skip adding this row.</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.Events.ShouldSkipFooter">
            <summary>
            Fires before a footer row has been added.
            </summary>
            <returns>return true to skip adding this row.</returns>
        </member>
        <member name="T:PdfRpt.Core.Contracts.IPdfFont">
            <summary>
            Custom font's definitions
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfFont.Color">
            <summary>
            Font's color
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfFont.Fonts">
            <summary>
            You need to define at least 2 fonts.
            First one will be used as the main font and second one, default font.
            Sometimes first font has not the necessary data to display the current character, 
            in this case, 2nd font will be used automatically.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfFont.FontSelector">
            <summary>
            FontSelector will be used for processing the input text and creating the phrases
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfFont.Size">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.IPdfFont.Style">
            <summary>
            Font's style
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentFontStyle">
            <summary>
            Possible font styles
            </summary>    
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.None">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.Normal">
            <summary>
            This is a possible font style.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.Bold">
            <summary>
            This is a possible font style.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.Italic">
            <summary>
            This is a possible font style.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.Underline">
            <summary>
            This is a possible font style.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.Strikethru">
            <summary>
            This is a possible font style.
            </summary>         
        </member>
        <member name="F:PdfRpt.Core.Contracts.DocumentFontStyle.BoldItalic">
            <summary>
            This is a possible font style.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.ITableTemplate">
            <summary>
            Main table's template
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.AlternatingRowBackgroundColor">
            <summary>
            Alternating rows background color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.AlternatingRowFontColor">
            <summary>
            Alternating rows font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.CellBorderColor">
            <summary>
            Cells border color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.HeaderBackgroundColor">
            <summary>
            Main table's header background color value. 
            At least one color and max. 2 colors should be specified. If 2 colors are introduced a gradient by using the PdfShading will be generated.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.HeaderHorizontalAlignment">
            <summary>
            Header's caption horizontal alignment.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.HeaderFontColor">
            <summary>
            Main table's headers font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.RowBackgroundColor">
            <summary>
            Rows background color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.RowFontColor">
            <summary>
            Rows font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.PreviousPageSummaryRowBackgroundColor">
            <summary>
            Remaining rows background color value.
            At least one color and max. 2 colors should be specified. If 2 colors are introduced a gradient by using the PdfShading will be generated.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.PreviousPageSummaryRowFontColor">
            <summary>
            Remaining rows font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.SummaryRowBackgroundColor">
            <summary>
            Summary rows background color value.
            At least one color and max. 2 colors should be specified. If 2 colors are introduced a gradient by using the PdfShading will be generated.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.SummaryRowFontColor">
            <summary>
            Summary rows font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.PageSummaryRowBackgroundColor">
            <summary>
            Pages summary row background color value.
            At least one color and max. 2 colors should be specified. If 2 colors are introduced a gradient by using the PdfShading will be generated.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.PageSummaryRowFontColor">
            <summary>
            Pages summary rows font color value.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.ITableTemplate.ShowGridLines">
            <summary>
            Sets visibility of the main table's grid lines.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.DocumentPreferences">
            <summary>
            Document settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.PagePreferences">
            <summary>
            Pages Preferences
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.MultipleColumnsPerPage">
            <summary>
            Wrapping the main table in multiple columns per page. 
            Leave it as null if you don't want to use it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.DiagonalWatermark">
            <summary>
            Add a diagonal watermark text to each page
            Leave it as null if you don't want to use it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.MainTablePreferences">
            <summary>
            Holds MainTable's general properties.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.PrintingPreferences">
            <summary>
            Indicates default values of print dialog box.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.ViewerPreferences">
            <summary>
            Specifies the Adobe Reader's settings when a document is opened.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.DocumentMetadata">
            <summary>
            Pdf document's meta-data properties
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.FileAttachments">
            <summary>
            Adds the optional file attachments at the document level.
            To make The attachments panel visible automatically, Set the DocumentPreferences.ViewerPreferences.PageMode to ViewerPageMode.UseAttachments.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.CompressionSettings">
            <summary>
            Applies Compression. It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.ExportSettings">
            <summary>
            Sets the desired exporters such as ExportToExcel.
            It can be null.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.GroupsPreferences">
            <summary>
            Groups preferences.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.DocumentPreferences.ConformanceLevel">
            <summary>
            Promises predictable and consistent output for press printing.
            Choose None (default value), if you want a shiny PDF with transparent images
            and the document should be encrypted or needs embedded files.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.RowType">
            <summary>
            Main table's row types
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.None">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.PreviousPageSummaryRow">
            <summary>
            Represents a main table's previous page summary row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.SummaryRow">
            <summary>
            Represents a main table's summary row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.DataTableRow">
            <summary>
            Represents a main table's datatable row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.HeaderRow">
            <summary>
            Represents a main table's header row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.MainHeaderRow">
            <summary>
            Represents a main table's header row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.AllGroupsSummaryRow">
            <summary>
            Represents a main table's all groups summary row
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Contracts.RowType.PageSummaryRow">
            <summary>
            Represents a main table's page summary row
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.SharedData">
            <summary>
            A class to hold shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ColumnCellsSummaryData">
            <summary>
            Summary cells data list
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ColumnCellsFinalSummaryData">
            <summary>
            Final summary cells data list, after applying aggregate functions
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.GroupByProperties">
            <summary>
            List of properties of the defined group
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.IsGroupingEnabled">
            <summary>
            Indicates grouping is enabled or not
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.SummarySettings">
            <summary>
            Pages and groups summary values settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.PageSetup">
            <summary>
            Document settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.PdfColumnsAttributes">
            <summary>
            Defining which properties of MainTableDataSource should be rendered and how.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.OriginalPdfColumnsAttributes">
            <summary>
            None filtered version of PdfColumnsAttributes
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.PdfDoc">
            <summary>
            PDF Document
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.PdfFont">
            <summary>
            Pdf document's font
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.Header">
            <summary>
            Defines dynamic headers of pages and individual groups.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.PdfWriter">
            <summary>
            PdfWriter object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.MainTableEvents">
            <summary>
            Main table's cells and rows events
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.Template">
            <summary>
            Main table's template
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ShouldWrapTablesInColumns">
            <summary>
            Is wrapping main table in multiple columns enabled?
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.MainTableDataSource">
            <summary>
            Main table's data source. The data to render.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ColumnsCount">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ColumnsWidths">
            <summary>
            Returns ordered list of MainTable's columns widths.
            </summary>
            <returns>Columns Widths</returns>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.HorizontalStackPanelColumnsPerRow">
            <summary>
            If TableType is set to HorizontalStackPanel, HorizontalStackPanelColumnsPerRow will define the
            number of columns per row.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.IsMainTableHorizontalStackPanel">
            <summary>
            Determines whether MainTable is a HorizontalStackPanel or not.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.HasTableRowNumberColumn">
            <summary>
            Do we have a row number column?
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SharedData.ExtraHeaderRows">
            <summary>
            Holds Extra Header Rows Value.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.LastRenderedRowData">
            <summary>
            A class to hold last result of the actual rendering engine of iTextSharp during its processes.
            For instance defining a header is not equal to adding its content to the page. Only after its 
            addition/rendering we can find its actual height.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Contracts.LastRenderedRowData.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.HeaderHeight">
            <summary>
            Actual height of the header after its addition to the page
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.LastGroupRowNumber">
            <summary>
            Last rendered group's row number 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.LastOverallDataRowNumber">
            <summary>
            Last rendered overall row number 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.LastRenderedGroupNumber">
            <summary>
            Last rendered group number 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.LastRenderedRowNumber">
            <summary>
            Last rendered row number which can be different in multiple groups
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.IsNewGroupStarted">
            <summary>
            Determines if a new group is being added to the document
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.LastGroupNumber">
            <summary>
            Last defined group number 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.PagesBoundaries">
            <summary>
            Determines firstRow and lastRow of the page in overall row numbers 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.LastRenderedRowData.PreviousTableRowData">
            <summary>
            Previous row's data.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.DocumentSettings">
            <summary>
            General PDF Document Settings
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.ApplyBeforePdfDocOpenSettings">
            <summary>
            Some settings should be called before PdfDoc.Open().
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.ApplySettings">
            <summary>
            Apply initial settings
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.SetEncryption">
            <summary>
            Enable Encryption
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.ApplySignature(System.IO.Stream)">
            <summary>
            Applies a digital signature to a document
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.AddFileAttachments">
            <summary>
            Adds all of the file attachments.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.DocumentSettings.GetPageSizeAndColor(PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Sets the PageSize and its background color.
            </summary>
            <returns>PageSize info</returns>
        </member>
        <member name="P:PdfRpt.Core.Helper.DocumentSettings.PdfWriter">
            <summary>
            PdfWriter Object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.DocumentSettings.DocumentSecurity">
            <summary>
            Sets the encryption options for this document.
            Leave it as null if you don't want to use it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.DocumentSettings.PageSetup">
            <summary>
            Document settings.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.DocumentSettings.PdfDoc">
            <summary>
            Document object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.DocumentSettings.DocumentProperties">
            <summary>
            Pdf document's meta-data properties
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Security.PfxData">
            <summary>
            A Personal Information Exchange File Info
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Security.PfxData.X509PrivateKeys">
            <summary>
            Represents an X509 certificate
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Security.PfxData.PublicKey">
            <summary>
            Certificate's public key
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Security.PfxReader">
            <summary>
            A Personal Information Exchange File Reader
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Security.PfxReader.ReadCertificate(System.String,System.String)">
            <summary>
            Reads A Personal Information Exchange File.
            </summary>
            <param name="pfxPath">Certificate file's path</param>
            <param name="pfxPassword">Certificate file's password</param>
        </member>
        <member name="T:PdfRpt.Core.Helper.VectorImages">
            <summary>
            Contains the definition of some useful vector images
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.DrawCheckmark(iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte,System.Drawing.Color)">
            <summary>
            A vector checkmark image's definition
            </summary>
            <param name="position">position of the drawing</param>
            <param name="contentByte">drawing canvas</param>
            <param name="color">fill color</param>
            <returns>a vector image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.DrawCheckmarkImageAtPosition(iTextSharp.text.Image,iTextSharp.text.Rectangle,System.Single,System.Single)">
            <summary>
            Draws the images at the specified location.
            </summary>
            <param name="img">Image</param>
            <param name="position">position of the drawing</param>
            <param name="newWidth">ScaleAbsolute's newWidth</param>
            <param name="newHeight">ScaleAbsolute's newHeight</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.CheckmarkImage(iTextSharp.text.pdf.PdfContentByte,System.Drawing.Color)">
            <summary>
            A vector checkmark image's definition
            </summary>
            <param name="contentByte">drawing canvas</param>
            <param name="color">fill color</param>
            <returns>a vector image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.DrawCross(iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte,System.Drawing.Color)">
            <summary>
            A vector cross sign image's definition
            </summary>
            <param name="position">position of the drawing</param>
            <param name="cb">drawing canvas</param>
            <param name="color">fill color</param>
            <returns>a vector image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.DrawCrossImageAtPosition(iTextSharp.text.Image,iTextSharp.text.Rectangle,System.Single,System.Single)">
            <summary>
            Draws the images at the specified location.
            </summary>
            <param name="img">Image</param>
            <param name="position">position of the drawing</param>
            <param name="newWidth">ScaleAbsolute's newWidth</param>
            <param name="newHeight">ScaleAbsolute's newHeight</param>
        </member>
        <member name="M:PdfRpt.Core.Helper.VectorImages.CrossImage(iTextSharp.text.pdf.PdfContentByte,System.Drawing.Color)">
            <summary>
            A vector cross sign image's definition
            </summary>
            <param name="cb">drawing canvas</param>
            <param name="color">fill color</param>
            <returns>a vector image</returns>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.AdHocPdfColumnDefinitions">
            <summary>
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.AdHocPdfColumnDefinitions.#ctor(PdfRpt.Core.Contracts.IDataSource,PdfRpt.Core.Contracts.AdHocColumnsConventions)">
            <summary>
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
            <param name="bodyDataSource">PdfRpt's DataSource Contract</param>
            <param name="conventions">Here you can control how cells should be rendered based on their specific data types.</param>        
        </member>
        <member name="M:PdfRpt.Core.PdfTable.AdHocPdfColumnDefinitions.CreatePdfColumnDefinitions">
            <summary>
            Creates PdfColumnDefinitions list based on the PdfRptAdHocColumnsConventions
            </summary>
            <returns>PdfColumnDefinitions list</returns>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Core.PdfTable"/> namespace contains classes for rendering the main table of the report.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.CalculatedFieldFormulaAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.CalculatedFieldFormulaAttribute.#ctor(System.String)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="propertyName">Name of the corresponding column's property.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.CalculatedFieldFormulaAttribute.PropertyName">
            <summary>
            Name of the corresponding column's property.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.IncludedGroupFieldEqualityComparerAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.IncludedGroupFieldEqualityComparerAttribute.#ctor(System.String)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="propertyName">Name of the corresponding column's property.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.IncludedGroupFieldEqualityComparerAttribute.PropertyName">
            <summary>
            Name of the corresponding column's property.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.DataSources"/> namespace contains some predefined DataAnnotations classes.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.AggregateFunctionAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.AggregateFunctionAttribute.#ctor(PdfRpt.Core.Contracts.AggregateFunction)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="aggregateFunction">Using predefined aggregate functions.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.AggregateFunctionAttribute.AggregateFunction">
            <summary>
            Using predefined aggregate functions.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.CellsHorizontalAlignmentAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.CellsHorizontalAlignmentAttribute.#ctor(PdfRpt.Core.Contracts.HorizontalAlignment)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="cellsHorizontalAlignment">Content's Horizontal alignment.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.CellsHorizontalAlignmentAttribute.CellsHorizontalAlignment">
            <summary>
            Content's Horizontal alignment.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.CustomAggregateFunctionAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.CustomAggregateFunctionAttribute.#ctor(System.Type)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="aggregateFunctionType">A typeof(IAggregateFunction) value, such as typeof(Sum).</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.CustomAggregateFunctionAttribute.AggregateFunctionType">
            <summary>
            A typeof(IAggregateFunction) value.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.IncludeInGroupingAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.IncludeInGroupingAttribute.#ctor(System.Boolean)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="includeInGrouping">Defining a group of rows by including this filed in grouping.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.IncludeInGroupingAttribute.IncludeInGrouping">
            <summary>
            Defining a group of rows by including this filed in grouping.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.IsCalculatedFieldAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.IsCalculatedFieldAttribute.#ctor(System.Boolean)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="isCalculated">It enables using CalculatedFieldFormula to produce a new column based on the existing values of other columns according to the provided formula.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.IsCalculatedFieldAttribute.IsCalculated">
            <summary>
            It enables using CalculatedFieldFormula to produce a new column based on the existing values of other columns according to the provided formula.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.IsVisibleAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.IsVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="isVisible">Determines exclusion or visibility of this column.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.IsVisibleAttribute.IsVisible">
            <summary>
            Defining a group of rows by including this filed in grouping.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.OrderAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.OrderAttribute.#ctor(System.Int32)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="order">Column's order.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.OrderAttribute.Order">
            <summary>
            Column's order.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.WidthAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.WidthAttribute.#ctor(System.Single)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="width">The column's width according to the PdfRptPageSetup.MainTableColumnsWidthsType value.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.WidthAttribute.Width">
            <summary>
            The column's width according to the PdfRptPageSetup.MainTableColumnsWidthsType value.
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.PropertyNameAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.PropertyNameAttribute.#ctor(System.String)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="propertyName">Field name of the current column's cells.</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.PropertyNameAttribute.PropertyName">
            <summary>
            Field name of the current column's cells.
            If it's a RowNumber or CalculatedField, it can be an arbitrary string
            </summary>
        </member>
        <member name="T:PdfRpt.DataAnnotations.ColumnItemsTemplateAttribute">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
        </member>
        <member name="M:PdfRpt.DataAnnotations.ColumnItemsTemplateAttribute.#ctor(System.Type)">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="templateType">A typeof(IPdfColumnItemsTemplate) value, such as typeof(TextBlockField).</param>
        </member>
        <member name="P:PdfRpt.DataAnnotations.ColumnItemsTemplateAttribute.TemplateType">
            <summary>
            A typeof(IPdfColumnItemsTemplate) value, such as typeof(TextBlockField).
            </summary>
        </member>
        <member name="T:PdfRpt.DataSources.AccessDataReaderDataSource">
            <summary>
            Microsoft Access DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.AccessDataReaderDataSource.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="filePath">.mdb or .accdb file path</param>
            <param name="password">the optional password</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.DataSources.AccessDataReaderDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.AnonymousTypeListDataSource">
            <summary>
            A list DataSource
            </summary>    
        </member>
        <member name="M:PdfRpt.DataSources.AnonymousTypeListDataSource.#ctor(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Converts a list of anonymous type items to an IEnumerable of Pdf Cells Data.
            </summary>
            <param name="listOfRows">list of items</param>
            <param name="dumpLevel">how many levels should be searched</param> 
        </member>
        <member name="M:PdfRpt.DataSources.AnonymousTypeListDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.DataTableDataSource">
            <summary>
            System.Data.DataTable DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.DataTableDataSource.#ctor(System.Data.DataTable)">
            <summary>
            Converts a DataTable to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="dataTable">our dataTable value to convert</param>
        </member>
        <member name="M:PdfRpt.DataSources.DataTableDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.ExcelDataReaderDataSource">
            <summary>
            Microsoft Excel Worksheet Reader DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.ExcelDataReaderDataSource.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="filePath">.xlsx or .xls file path</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.DataSources.ExcelDataReaderDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.DataSources"/> namespace contains some predefined DataSource classes.
            </summary>
        </member>
        <member name="T:PdfRpt.DataSources.CrosstabDataSource">
            <summary>
            A Dynamic Crosstab DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.CrosstabDataSource.#ctor(System.Collections.IEnumerable,System.Boolean,System.Int32)">
            <summary>
            Converts the result of the CrosstabExtension.Pivot method to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="source">Result of the CrosstabExtension.Pivot method</param>
            <param name="topFieldsAreVariableInEachRow">Indicates whether top fields should be prepopulated before starting the main table's rendering or not</param>
            <param name="dumpLevel">how many levels should be searched</param>  
        </member>
        <member name="M:PdfRpt.DataSources.CrosstabDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.CrosstabExtension">
            <summary>
            Converts a list to a crosstab list
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.CrosstabExtension.Pivot``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``0},``4},System.Func{System.Collections.Generic.IEnumerable{``0},``3})">
            <summary>
            Dynamic crosstab data source maker
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source">List of rows</param>
            <param name="leftColumn">Row Heading</param>
            <param name="topField">Pivot Column</param>
            <param name="valueField">Aggregate</param>
            <param name="additionalFields">Additional Fields</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.DataSources.CrosstabExtension.Pivot``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``0},``4},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``0},``4},System.Func{System.Collections.Generic.IEnumerable{``0},``3})">
            <summary>
            Dynamic crosstab data source maker
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="source">List of rows</param>
            <param name="leftColumn">Row Heading</param>
            <param name="topField1">Pivot Column</param>
            <param name="valueField1">Aggregate</param>
            <param name="topField2">Pivot Column</param>
            <param name="valueField2">Aggregate</param>
            <param name="additionalFields">Additional Fields</param>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.OdbcDataReaderDataSource">
            <summary>
            Odbc DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.OdbcDataReaderDataSource.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.DataSources.OdbcDataReaderDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.SqlDataReaderDataSource">
            <summary>
            SQL Server DataSource
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.SqlDataReaderDataSource.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Converts the selected records to an IEnumerable of the Pdf Cells Data
            </summary>
            <param name="connectionString">the connection string</param>
            <param name="sql">SQL statement to select the required records</param>
            <param name="parametersValues">values of the parameters started with @</param>
        </member>
        <member name="M:PdfRpt.DataSources.SqlDataReaderDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.StronglyTypedListDataSource`1">
            <summary>
            A list DataSource
            </summary>
            <typeparam name="T">Type of the list's items</typeparam>
        </member>
        <member name="M:PdfRpt.DataSources.StronglyTypedListDataSource`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Converts a list of strongly typed items to an IEnumerable of Pdf Cells Data.
            It's useful for working with different ORM's, because final results of all them could be 
            a strongly typed list of data.
            </summary>
            <param name="listOfRows">list of items</param>
            <param name="dumpLevel">how many levels should be searched</param> 
        </member>
        <member name="M:PdfRpt.DataSources.StronglyTypedListDataSource`1.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.DataSources.XmlDataSource">
            <summary>
            XML DataSource class
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.XmlDataSource.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Converts the XML documents data to an IEnumerable of Pdf Cells Data
            </summary>
            <param name="xml">XML document's content</param>
            <param name="descendantsXPathSelect">Descendants XPath</param>
            <param name="itemsXPathList">XPath list of the required items</param>
        </member>
        <member name="M:PdfRpt.DataSources.XmlDataSource.Rows">
            <summary>
            The data to render.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PdfRpt.FluentInterface.XHtmlFooterProviderBuilder">
            <summary>
            Defines dynamic footer of the pages by using iTextSharp's HTML to PDF capabilities (XmlWorker class).
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlFooterProviderBuilder.PageFooterProperties(PdfRpt.Core.Contracts.XFooterBasicProperties)">
            <summary>
            Properties of page footers.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlFooterProviderBuilder.AddPageFooter(System.Func{PdfRpt.Core.Contracts.FooterData,System.String})">
            <summary>
            Returns dynamic HTML content of the page footer.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder">
            <summary>
            Defines dynamic headers for pages and individual groups by using iTextSharp's HTML to PDF capabilities (XmlWorker class).
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder.PageHeaderProperties(PdfRpt.Core.Contracts.XHeaderBasicProperties)">
            <summary>
            Properties of pages headerds. 
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder.GroupHeaderProperties(PdfRpt.Core.Contracts.XHeaderBasicProperties)">
            <summary>
            Properties of groups headerds. 
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder.AddGroupHeader(System.Func{PdfRpt.Core.Contracts.HeaderData,System.String})">
            <summary>
            Returns dynamic HTML content of the group header.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.XHtmlHeaderProviderBuilder.AddPageHeader(System.Func{PdfRpt.Core.Contracts.HeaderData,System.String})">
            <summary>
            Returns dynamic HTML content of the page header.
            </summary>
        </member>
        <member name="T:PdfRpt.FooterTemplates.InlineFooterProvider">
            <summary>
            Defines dynamic footer of the pages.
            </summary>
        </member>
        <member name="M:PdfRpt.FooterTemplates.InlineFooterProvider.ClosingDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires before closing the document
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.InlineFooterProvider.PageFinished(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.InlineFooterProvider.DocumentOpened(iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="P:PdfRpt.FooterTemplates.InlineFooterProvider.FooterProperties">
            <summary>
            Properties of page footers.
            </summary>
        </member>
        <member name="P:PdfRpt.FooterTemplates.InlineFooterProvider.AddPageFooter">
            <summary>
            Returns dynamic content of the page footer.
            </summary>
        </member>
        <member name="T:PdfRpt.FooterTemplates.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.FooterTemplates"/> namespace contains built-in footer templates.
            </summary>
        </member>
        <member name="T:PdfRpt.FooterTemplates.XHtmlFooterProvider">
            <summary>
            Defines dynamic footer of the pages by using iTextSharp's limited HTML to PDF capabilities (HTMLWorker class).
            </summary>
        </member>
        <member name="M:PdfRpt.FooterTemplates.XHtmlFooterProvider.ClosingDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires before closing the document
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.XHtmlFooterProvider.PageFinished(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.XHtmlFooterProvider.DocumentOpened(iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="P:PdfRpt.FooterTemplates.XHtmlFooterProvider.FooterProperties">
            <summary>
            Properties of page footers.
            </summary>
        </member>
        <member name="P:PdfRpt.FooterTemplates.XHtmlFooterProvider.AddPageFooter">
            <summary>
            Returns dynamic HTML content of the page footer.
            </summary>
        </member>
        <member name="T:PdfRpt.HeaderTemplates.DefaultHeaderProvider">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.DefaultHeaderProvider.RenderingGroupHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new groups is being created.
            </summary>
            <param name="pdfDoc"></param>
            <param name="pdfWriter"></param>
            <param name="newGroupInfo"></param>
            <param name="summaryData"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.DefaultHeaderProvider.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.DefaultHeaderProvider.RenderingReportHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new page is being added.
            </summary>
            <param name="pdfDoc"></param>
            <param name="pdfWriter"></param>
            <param name="summaryData"></param>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.Message">
            <summary>
            A message to show.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.MessageFontColor">
            <summary>
            Message's FontColor.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.MessageFontStyle">
            <summary>
            Message's FontStyle.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.PdfFont">
            <summary>
            Message's font.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.ImagePath">
            <summary>
            An optional logo path.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.RunDirection">
            <summary>
            A Possible run direction value, left-to-right or right-to-left.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.GroupHeaderCells">
            <summary>
            Return dynamic cells of the group header.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.DefaultHeaderProvider.GroupHeaderColumnsNumber">
            <summary>
            Number of columns of GroupHeader.
            </summary>
        </member>
        <member name="T:PdfRpt.Export.ExportToCsv">
            <summary>
            CSV DataExporter
            </summary>
        </member>
        <member name="M:PdfRpt.Export.ExportToCsv.#ctor">
            <summary>
            ctor.
            </summary>        
        </member>
        <member name="M:PdfRpt.Export.ExportToCsv.ClosingDocument">
            <summary>
            Fires before closing the document
            </summary>
            <returns>returns the final produced file stream</returns>
        </member>
        <member name="M:PdfRpt.Export.ExportToCsv.DocumentOpened(System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="pdfColumnsAttributes">Sets columns definitions of the current report at startup</param>
            <param name="documentPreferences">Document settings.</param>
        </member>
        <member name="M:PdfRpt.Export.ExportToCsv.RowAdded(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Boolean)">
            <summary>
            Fires after adding a row to the main table.
            </summary>
            <param name="cellsData">cells data</param>
            <param name="isNewGroupStarted">Indicates starting a new group</param>
        </member>
        <member name="P:PdfRpt.Export.ExportToCsv.Description">
            <summary>
            Sets or gets the produced file's description.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToCsv.FileName">
            <summary>
            Sets or gets the produced file's name.
            </summary>
        </member>
        <member name="T:PdfRpt.Export.ExportToExcel">
            <summary>
            Microsoft Excel Worksheet DataExporter
            </summary>
        </member>
        <member name="M:PdfRpt.Export.ExportToExcel.#ctor">
            <summary>
            ctor.
            </summary>        
        </member>
        <member name="M:PdfRpt.Export.ExportToExcel.ClosingDocument">
            <summary>
            Fires before closing the document
            </summary>
            <returns>returns the final produced file stream</returns>
        </member>
        <member name="M:PdfRpt.Export.ExportToExcel.DocumentOpened(System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="pdfColumnsAttributes">Sets columns definitions of the current report at startup</param>
            <param name="documentPreferences">Document settings.</param>
        </member>
        <member name="M:PdfRpt.Export.ExportToExcel.RowAdded(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Boolean)">
            <summary>
            Fires after adding a row to the main table.
            </summary>
            <param name="cellsData">cells data</param>
            <param name="isNewGroupStarted">Indicates starting a new group</param>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.DateTimeFormat">
            <summary>
            DateTime Format such as yyyy-MM-dd hh:mm
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.Description">
            <summary>
            Sets or gets the produced file's description.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.FileName">
            <summary>
            Sets or gets the produced file's name.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.Footer">
            <summary>
            Footer's Text
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.Header">
            <summary>
            Header's Text
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.Numberformat">
            <summary>
            Number format such as #,##0
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.PageLayoutView">
            <summary>
            Sets the view mode of the worksheet to PageLayout.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.ShowGridLines">
            <summary>
            Show GridLines in the worksheet.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.TableStyle">
            <summary>
            Sets or gets the produced table's style.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.TimeSpanFormat">
            <summary>
            TimeSpan Format such as hh:mm:ss
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToExcel.WorksheetName">
            <summary>
            Sets or gets the WorksheetName.
            </summary>
        </member>
        <member name="T:PdfRpt.Export.ExportToXml">
            <summary>
            XML DataExporter
            </summary>
        </member>
        <member name="M:PdfRpt.Export.ExportToXml.#ctor">
            <summary>
            ctor.
            </summary>        
        </member>
        <member name="M:PdfRpt.Export.ExportToXml.ClosingDocument">
            <summary>
            Fires before closing the document
            </summary>
            <returns>returns the final produced file stream</returns>
        </member>
        <member name="M:PdfRpt.Export.ExportToXml.DocumentOpened(System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},PdfRpt.Core.Contracts.DocumentPreferences)">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="pdfColumnsAttributes">Sets columns definitions of the current report at startup</param>
            <param name="documentPreferences">Document settings.</param>
        </member>
        <member name="M:PdfRpt.Export.ExportToXml.RowAdded(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Boolean)">
            <summary>
            Fires after adding a row to the main table.
            </summary>
            <param name="cellsData">cells data</param>
            <param name="isNewGroupStarted">Indicates starting a new group</param>
        </member>
        <member name="P:PdfRpt.Export.ExportToXml.Description">
            <summary>
            Sets or gets the produced file's description.
            </summary>
        </member>
        <member name="P:PdfRpt.Export.ExportToXml.FileName">
            <summary>
            Sets or gets the produced file's name.
            </summary>
        </member>
        <member name="T:PdfRpt.Export.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.Export"/> namespace contains some predefined DataExporter classes.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.PdfReport">
            <summary>
            PdfReport Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.DefaultFonts(System.Action{PdfRpt.FluentInterface.DefaultFontsBuilder})">
            <summary>
            Sets the documents's default fonts.
            </summary>
            <param name="pdfRptDefaultFontsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.DocumentPreferences(System.Action{PdfRpt.FluentInterface.DocumentPreferencesBuilder})">
            <summary>
            Document settings
            </summary>
            <param name="pdfRptPagePreferencesBuilder">Document settings builder</param>
            <returns>PdfReport</returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTablePreferences(System.Action{PdfRpt.FluentInterface.MainTablePreferencesBuilder})">
            <summary>
            MainTable's general properties
            </summary>
            <param name="pdfRptMainTablePreferencesBuilder">MainTable's general properties builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.Export(System.Action{PdfRpt.FluentInterface.ExportToBuilder})">
            <summary>
            Sets the desired exporters such as ExportToExcel.
            You can set multiple exporters here.
            </summary>
            <param name="pdfRptExportToBuilder">DataExporter Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.Generate(System.Action{PdfRpt.FluentInterface.FileBuilder},System.Boolean)">
            <summary>
            Generates the final PDF file.
            </summary>
            <param name="pdfRptFileBuilder">Pdf RptFile Builder Settings</param>
            <param name="debugMode">Run in debug mode</param>
            <returns>IPdfReportData</returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.Encrypt(System.Action{PdfRpt.FluentInterface.EncryptedFileBuilder})">
            <summary>
            Sets the encryption preferences for this document.
            </summary>
            <param name="pdfRptEncryptedFileBuilder">encryption preferences builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.Sign(System.Action{PdfRpt.FluentInterface.SignedFileBuilder})">
            <summary>
            Sets ths digital signature's info.
            </summary>
            <param name="pdfRptSignedFileBuilder">digital signature's info builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableEvents(System.Action{PdfRpt.FluentInterface.MainTableEventsBuilder})">
            <summary>
            Sets the Main table's cells and rows events.
            </summary>
            <param name="mainTableEventsBuilder">Events Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableTemplate(System.Action{PdfRpt.FluentInterface.MainTableTemplateBuilder})">
            <summary>
            Sets the default template.
            </summary>
            <param name="mainTableTemplateBuilder">Template Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.PagesHeader(System.Action{PdfRpt.FluentInterface.PagesHeaderBuilder})">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
            <param name="pagesHeaderBuilder">Pages Header Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.PagesFooter(System.Action{PdfRpt.FluentInterface.PagesFooterBuilder})">
            <summary>
            Defines custom footer of the each page.
            </summary>
            <param name="pagesFooterBuilder">Pages Footer Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableDataSource(System.Action{PdfRpt.FluentInterface.MainTableDataSourceBuilder})">
            <summary>
            Main table's data source. The data to render. 
            </summary>
            <param name="mainTableDataSourceBuilder">Data Source Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableSummarySettings(System.Action{PdfRpt.FluentInterface.MainTableSummarySettingsBuilder})">
            <summary>
            Pages and groups summary values settings
            </summary>
            <param name="mainTableSummarySettingsBuilder">Summary Settings Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableColumns(System.Action{PdfRpt.FluentInterface.MainTableColumnsBuilder})">
            <summary>
            Defining how a property of MainTableDataSource should be rendered as a column's cell.
            </summary>
            <param name="mainTableColumnsBuilder">Columns Builder</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.FluentInterface.PdfReport.MainTableAdHocColumnsConventions(System.Action{PdfRpt.FluentInterface.MainTableAdHocColumnsConventionsBuilder})">
            <summary>
            If you don't set PdfColumnsDefinitions, list of the main table's columns will be extracted from MainTableDataSource automatically.
            Here you can control how cells should be rendered based on their specific data types.
            </summary>
            <param name="mainTableAdHocColumnsConventionsBuilder">Conventions Builder</param>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.FluentInterface.PdfReport.PdfRptDataBuilder">
            <summary>
            Gets the Main interface of PdfRpt
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.DefaultFontsBuilder">
            <summary>
            Default Fonts Settings Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultFontsBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultFontsBuilder.Size(System.Int32)">
            <summary>
            Sets the default fonts size.
            </summary>
            <param name="value">font size</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultFontsBuilder.Color(System.Drawing.Color)">
            <summary>
            Sets the default fonts color.
            </summary>
            <param name="colorValue"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DefaultFontsBuilder.Path(System.String,System.String)">
            <summary>
            Sets the optional fonts path.
            </summary>
            <param name="defaultFont1">font1's path</param>
            <param name="defaultFont2">font2's path</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.EncryptedFileBuilder">
            <summary>
            Encryption Preferences Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.EncryptedFileBuilder.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.EncryptedFileBuilder.WithPassword(System.String,System.String)">
            <summary>
            Using the AES algorithm to encrypt the pdf file.
            </summary>
            <param name="editPassword">The owner password. It can't be null, otherwise these settings will be ignored.</param>
            <param name="readPassword">The user password. It can be null.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.EncryptedFileBuilder.WithPermissions(PdfRpt.Core.Contracts.DocumentPermissions)">
            <summary>
            Document Permissions.
            </summary>
            <param name="documentPermissions">Document Permissions.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.EncryptedFileBuilder.WithPublicKey(System.String,System.String)">
            <summary>
            Using a personal information exchange file to encrypt the pdf file.
            </summary>
            <param name="pfxPassword">Certificate file's password</param>
            <param name="pfxPath">Certificate file's path</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.EncryptedFileBuilder.EncryptionPreferences">
            <summary>
            Gets the encryption options for this document.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.ExportToBuilder">
            <summary>
            PdfRpt DataExporter Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.ExportToBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ExportToBuilder.ToExcel(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Microsoft Excel Worksheet DataExporter
            </summary>
            <param name="description">the produced file's description</param>
            <param name="fileName">the produced file's name</param>
            <param name="worksheetName">the WorksheetName</param>
            <param name="footer">Footer's Text</param>
            <param name="header">Header's Text</param>
            <param name="numberformat">Number format such as #,##0</param>
            <param name="dateTimeFormat">DateTime Format such as yyyy-MM-dd hh:mm</param>
            <param name="timeSpanFormat">TimeSpan Format such as hh:mm:ss</param>
            <param name="pageLayoutView">Sets the view mode of the worksheet to PageLayout.</param>
            <param name="showGridLines">Show GridLines in the worksheet.</param>
            <param name="tableStyle">the produced table's style</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ExportToBuilder.ToCsv(System.String,System.String)">
            <summary>
            CSV DataExporter
            </summary>
            <param name="description">the produced file's description</param>
            <param name="fileName">the produced file's name</param> 
        </member>
        <member name="M:PdfRpt.FluentInterface.ExportToBuilder.ToXml(System.String,System.String)">
            <summary>
            XML DataExporter
            </summary>
            <param name="description">the produced file's description</param>
            <param name="fileName">the produced file's name</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.ExportToBuilder.ToCustomFormat(PdfRpt.Core.Contracts.IDataExporter)">
            <summary>
            Sets the desired exporters such as ExportToExcel.
            </summary>
            <param name="exportSettings">export settings</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.FileBuilder">
            <summary>
            Pdf RptFile Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.FileBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.FileBuilder.AsPdfFile(System.String)">
            <summary>
            Sets produced PDF file's path and name.
            It can be null if you are using an in memory stream.
            </summary>
            <param name="fileName">produced PDF file's path and name</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.FileBuilder.AsPdfStream(System.IO.Stream)">
            <summary>
            Sets the PDF file's stream.
            It can be null. In this case a new FileStream will be used automatically and you need to provide the FileName.
            </summary>
            <param name="pdfStreamOutput">the PDF file's stream</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.FileBuilder.FlushInBrowser(System.String,PdfRpt.Core.Contracts.FlushType)">
            <summary>
            Flushes the fileData into the user's browser.
            It's designed for the ASP.NET Applications.
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="flushType">How to flush an in memory PDF file</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.FileBuilder.FlushReportDataInBrowser">
            <summary>
            Flushes the fileData into the user's browser.
            </summary>
        </member>
        <member name="P:PdfRpt.FluentInterface.FileBuilder.FlushType">
            <summary>
            How to flush an in memory PDF file.
            </summary>
        </member>
        <member name="T:PdfRpt.FluentInterface.MainTablePreferencesBuilder">
            <summary>
            MainTable Preferences Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.ShowHeaderRow(System.Boolean)">
            <summary>
            Sets the visibility of the main table's header row.
            It's true by default.
            </summary>
            <param name="show">show header row</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.ColumnsWidthsType(PdfRpt.Core.Contracts.TableColumnWidthType)">
            <summary>
            Determines the WidthType of the column.
            </summary>
            <param name="widthType"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.NumberOfDataRowsPerPage(System.Int32)">
            <summary>
            If sets to zero, NumberOfDataRowsPerPage will be calculated automatically, otherwise as specified.
            Its default value is 0.
            </summary>
            <param name="rowsPerPage">number of data rows per page</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.SplitLate(System.Boolean)">
            <summary>
            Split the cells of the first row that doesn't fit the page.
            If true, a that row doesn't fit on the page, its complete row will be forwarded to the next page.
            If false, rows that are too high to fit on a page will be dropped from the table.
            Its default value is fale.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.SplitRows(System.Boolean)">
            <summary>
            If true, splits rows that are forwarded to the next page but that still 
            don't fit because the row height exceeds the available page height.
            Its default value is true.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.KeepTogether(System.Boolean)">
            <summary>
            If true, the table will be kept on one page if it fits, by forcing a 
            new page if it doesn't fit on the current page. 
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.SpacingBefore(System.Single)">
            <summary>
            Spacing before the main table.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.SpacingAfter(System.Single)">
            <summary>
            Spacing after the main table.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.MultipleColumnsPerPage(PdfRpt.Core.Contracts.MultipleColumnsPerPage)">
            <summary>
            Wrapping main table in multiple columns per pages.
            </summary>
            <param name="multipleColumns">multiple columns per page</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.GroupsPreferences(PdfRpt.Core.Contracts.GroupsPreferences)">
            <summary>
            Groups Preferences.
            </summary>
            <param name="preferences">Groups Preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.MainTableType(PdfRpt.Core.Contracts.TableType)">
            <summary>
            Sets the TableType. Its default value is a noraml PdfGrid.
            </summary>
            <param name="tableType">Value of the TableType</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.MainTablePreferencesBuilder.HorizontalStackPanelPreferences(System.Int32)">
            <summary>
            If MainTableType is set to HorizontalStackPanel, here you can define its preferences such as
            number of columns per row.
            Please note that All columns and properties of an object will create a single cell here.
            </summary>
            <param name="columnsPerRow">number of columns per row</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.DocumentPreferencesBuilder">
            <summary>
            PagePreferences Builder Class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.DocumentMargins(PdfRpt.Core.Contracts.DocumentMargins)">
            <summary>
            Sets the new document's margins. Its predefined values are Bottom = 60, Left = 36, Right = 36, Top = 36.
            </summary>
            <param name="margins">The new document's margins</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.RunDirection(PdfRpt.Core.Contracts.PdfRunDirection)">
            <summary>
            Sets the run direction to rtl or ltr.
            </summary>
            <param name="direction">run direction, rtl or ltr</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.CustomPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the page size to PageSize.A4 for instance.
            </summary>
            <param name="pageSize">selected page size</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.PageSize(PdfRpt.Core.Contracts.PdfPageSize)">
            <summary>
            Sets the page size to PageSize.A4 for instance.
            </summary>
            <param name="size">selected page size</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.Orientation(PdfRpt.Core.Contracts.PageOrientation)">
            <summary>
            Sets the PageOrientation.
            </summary>
            <param name="value">Page Orientation</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.BackgroundImage(System.String,System.Nullable{System.Drawing.PointF})">
            <summary>
            Background image's file path and position.
            </summary>
            <param name="backgroundImageFilePath">Background image's file path.</param>
            <param name="position">Background image's position. If it's set to null, the image will be painted at the center of the page.</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.PagesBackgroundColor(System.Drawing.Color)">
            <summary>
            Setting Page Background Color.
            </summary>
            <param name="backgroundColor">Pages Background Color</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.DocumentMetadata(PdfRpt.Core.Contracts.DocumentMetadata)">
            <summary>
            Sets document's metadata.
            </summary>
            <param name="metadata">document's metadata</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.ViewerPreferences(PdfRpt.Core.Contracts.PdfViewerPreferences)">
            <summary>
            Specifies the Adobe Reader's settings when a document is opened.
            </summary>
            <param name="preferences">viewer preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.DiagonalWatermark(PdfRpt.Core.Contracts.DiagonalWatermark)">
            <summary>
            A watermark text to display.
            </summary>
            <param name="watermark">watermark settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.Compression(PdfRpt.Core.Contracts.CompressionSettings)">
            <summary>
            Compression settings.
            </summary>
            <param name="settings">Compression settings</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.ConformanceLevel(PdfRpt.Core.Contracts.PdfXConformance)">
            <summary>
            Sets subsets of the PDF specification (ISO 15930-1 to ISO 15930-8) that promise 
            predictable and consistent output for press printing.
            </summary>
            <param name="level">conformance level</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.PrintingPreferences(PdfRpt.Core.Contracts.PrintingPreferences)">
            <summary>
            Indicates default values of print dialog box.
            </summary>
            <param name="preferences">printing preferences</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.DocumentPreferencesBuilder.AddFileAttachment(PdfRpt.Core.Contracts.FileAttachment)">
            <summary>
            Adds an optional file attachment at the document level.
            </summary>
            <param name="fileAttachment">a file attachment</param>
        </member>
        <member name="T:PdfRpt.FluentInterface.SignedFileBuilder">
            <summary>
            digital signature's info builder class.
            </summary>
        </member>
        <member name="M:PdfRpt.FluentInterface.SignedFileBuilder.#ctor(PdfRpt.FluentInterface.PdfReport)">
            <summary>
            ctor.
            </summary>
            <param name="pdfReport"></param>
        </member>
        <member name="M:PdfRpt.FluentInterface.SignedFileBuilder.WithCertificateFile(System.Boolean,System.String,System.String)">
            <summary>
            Sets the CertificateFile's info.
            </summary>
            <param name="appendSignature">If sets to true the signature and all the other content will be added as a new revision thus not invalidating existing signatures. Set it to true if you don't want to lose the EncryptionOptions.</param>
            <param name="pfxPassword">Certificate file's password</param>
            <param name="pfxPath">Certificate file's path</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.SignedFileBuilder.SigningInfo(System.String,System.String,System.String)">
            <summary>
            Sets the signing related info.
            </summary>
            <param name="reason">Sets the signing reason</param>
            <param name="contact">Sets the signing contact</param>
            <param name="location">Sets the signing location</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.SignedFileBuilder.WithTsaClient(System.String,System.String,System.String)">
            <summary>
            Timestamp Authority Client's info.
            It can be null.
            </summary>
            <param name="url">URL of the Time Stamp Authority</param>
            <param name="userName">TSA Username</param>
            <param name="password">TSA password</param>
        </member>
        <member name="M:PdfRpt.FluentInterface.SignedFileBuilder.VisibleSignature(System.String,System.Boolean,iTextSharp.text.Rectangle,PdfRpt.Core.Contracts.PdfRunDirection,System.Int32,System.String)">
            <summary>
            Sets VisibleSignature's info.
            It can be null.
            </summary>                
            <param name="text">Sets the signature text identifying the signer.</param>        
            <param name="useLastPageToShowSignature">If it sets to true, value of the Page property will be ignored.</param>
            <param name="position">Position and dimension of the field in the page.</param>
            <param name="runDirection">Possible run direction values, left-to-right or right-to-left</param>
            <param name="pageNumberToShowSignature">The page to place the field. The fist page is 1.</param>
            <param name="imagePath">Signature's image. It can be null.</param>
        </member>
        <member name="P:PdfRpt.FluentInterface.SignedFileBuilder.DigitalSignature">
            <summary>
            digital signature's info
            </summary>
        </member>
        <member name="T:PdfRpt.GenericFontProvider">
            <summary>
            A Generic Font Class
            </summary>
        </member>
        <member name="M:PdfRpt.GenericFontProvider.#ctor(PdfRpt.Core.Contracts.IPdfFont)">
            <summary>
            Sets registered font's name.
            </summary>
            <param name="font">pdfRptFont should contain at least 2 fonts.</param>
        </member>
        <member name="M:PdfRpt.GenericFontProvider.#ctor(iTextSharp.text.Font,iTextSharp.text.Font)">
            <summary>
            Sets registered font's name.
            </summary>
            <param name="mainFont">main font</param>
            <param name="defaultFont">default font</param>
        </member>
        <member name="M:PdfRpt.GenericFontProvider.#ctor(System.String,System.String)">
            <summary>
            Sets registered font's name
            </summary>
            <param name="mainFontPath">main font's path</param>
            <param name="defaultFontPath">default font's path</param>
        </member>
        <member name="P:PdfRpt.GenericFontProvider.Color">
            <summary>
            Font's color
            </summary>
        </member>
        <member name="P:PdfRpt.GenericFontProvider.Size">
            <summary>
            Font's size
            </summary>
        </member>
        <member name="P:PdfRpt.GenericFontProvider.Style">
            <summary>
            Font's style
            </summary>
        </member>
        <member name="P:PdfRpt.GenericFontProvider.Fonts">
            <summary>
            Available fonts list
            </summary>
        </member>
        <member name="P:PdfRpt.GenericFontProvider.FontSelector">
            <summary>
            FontSelector will be used for processing the input text and creating the phrases
            </summary>
        </member>
        <member name="T:PdfRpt.FooterTemplates.DefaultFooterProvider">
            <summary>
            A helper class/sample which demonstrates how to implement the IPdfRptCustomFooter to produce the pdfDoc's footer
            </summary>
        </member>
        <member name="M:PdfRpt.FooterTemplates.DefaultFooterProvider.#ctor(PdfRpt.Core.Contracts.IPdfFont,System.String,PdfRpt.Core.Contracts.PdfRunDirection)">
            <summary>
            Our DefaultFooter writes current date and page numbers at the bottom of the pages.
            </summary>
            <param name="pdfRptFont">Selected font</param>
            <param name="printDate">Current date</param>
            <param name="direction">rtl or ltr</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.DefaultFooterProvider.ClosingDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires before closing the document
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.DefaultFooterProvider.PageFinished(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="M:PdfRpt.FooterTemplates.DefaultFooterProvider.DocumentOpened(iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="columnCellsSummaryData">List of all rows summaries data</param>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.GroupsManager">
            <summary>
            Groups rendering helper class
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.GroupsManager.#ctor">
            <summary>
            Groups rendering helper class
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.GroupsManager.AddAllGroupsSummary">
            <summary>
            Creates a new summary row table to display summary of the all of the available groups
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.GroupsManager.ShouldStartNewGroup(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData})">
            <summary>
            Should we start a new group based on the current row's data?
            </summary>
            <param name="rowCellsData">Current row's data</param>
            <returns>true/false</returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.GroupsManager.StartNewGroup(System.Collections.Generic.IEnumerable{PdfRpt.Core.Contracts.CellData},System.Boolean)">
            <summary>
            Starts a new group by creating a new table and initializing its properties.
            </summary>
            <param name="groupHeaderRowCellsData">New group's header row data</param>
            <param name="shouldCheckOneGroupPerPage">Do we need a new page again?</param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.GroupsManager.ModifyRowData(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData})">
            <summary>
            Applies ShowGroupingPropertiesInAllRows if it's necessary.
            </summary>
            <param name="rowData">row's data</param>        
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.SharedData">
            <summary>
            Holds shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.InitTable">
            <summary>
            Initializes the MainTable's settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.MainGroupTable">
            <summary>
            It will be the container of all groups' tables to enable wrapping them in multiple columns
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.RowsManager">
            <summary>
            Helps rendering of different rows of the MainTable
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.MainTable">
            <summary>
            MainTable of the PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.GroupsManager.TableCellHelper">
            <summary>
            Helps rendering MainTable's cells
            </summary>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.InitTable">
            <summary>
            Initializes the MainTable's settings
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.InitTable.CreateMainTable">
            <summary>
            Creates and initializes the MainTable's settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.InitTable.SharedData">
            <summary>
            Holds shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.InitTable.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.InitTable.MainTable">
            <summary>
            MainTable of the PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.InitTable.TableCellHelper">
            <summary>
            Helps rendering main table's cells
            </summary>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.RowsManager">
            <summary>
            Helps rendering of different rows of the MainTable
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.RowsManager.AddFooterRow(PdfRpt.Core.Contracts.RowType)">
            <summary>
            Adds a footer/summary row
            </summary>
            <param name="pdfRowType"></param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.RowsManager.AddMainTableRows">
            <summary>
            Adds all main data rows of the MainTable
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.RowsManager.CloseMainTable">
            <summary>
            Finalizing the MainTable's rendering
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.RowsManager.TableInitAddHeaderAndFooter">
            <summary>
            Adds headers and footers rows of the MainTable
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.SharedData">
            <summary>
            Holds shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.GroupsManager">
            <summary>
            Groups rendering helper class
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.MainGroupTable">
            <summary>
            It will be the container of all groups' tables to enable wrapping them in multiple columns
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.MainTable">
            <summary>
            MainTable of the PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RowsManager.TableCellHelper">
            <summary>
            Helps rendering main table's cells
            </summary>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.TablesInColumns">
            <summary>
            Wrapping the main table in multiple columns per page. 
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TablesInColumns.Wrap(iTextSharp.text.IElement)">
            <summary>
            Wrapping an element in multiple columns per page. 
            </summary>
            <param name="element">The element to wrap</param>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TablesInColumns.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TablesInColumns.PageSetup">
            <summary>
            Document settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TablesInColumns.PdfDoc">
            <summary>
            PDF Document object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TablesInColumns.PdfWriter">
            <summary>
            PdfWriter object
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.Language">
            <summary>
            Number to word languages
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.Language.English">
            <summary>
            English Language
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.Language.Persian">
            <summary>
            Persian Language
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.DigitGroup">
            <summary>
            Digit's groups
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.DigitGroup.Ones">
            <summary>
            Ones group
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.DigitGroup.Teens">
            <summary>
            Teens group
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.DigitGroup.Tens">
            <summary>
            Tens group
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.DigitGroup.Hundreds">
            <summary>
            Hundreds group
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.DigitGroup.Thousands">
            <summary>
            Thousands group
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.NumberWord">
            <summary>
            Equivalent names of a group 
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.NumberWord.Group">
            <summary>
            Digit's group
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.NumberWord.Language">
            <summary>
            Number to word language
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.NumberWord.Names">
            <summary>
            Equivalent names
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.HumanReadableInteger">
            <summary>
            Convert a number into words
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.Int32,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.UInt32,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.Byte,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.Decimal,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.Double,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.HumanReadableInteger.NumberToText(System.Int64,PdfRpt.Core.Helper.Language)">
            <summary>
            display a numeric value using the equivalent text
            </summary>
            <param name="number">input number</param>
            <param name="language">local language</param>
            <returns>the equivalent text</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.PersianDate">
            <summary>
            Persian Date Converter
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.PersianDate.RightToLeftEmbedding">
            <summary>
            RTL Embedding Char, 0x202B.
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.PersianDate.PopDirectionalFormatting">
            <summary>
            Pop Directional Formatting Char, 0x202C.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianDate.FixWeakCharacters(System.String)">
            <summary>
            If you see dd/mm/yyy instead of yyyy/mm/dd in your RTL reports, use this method to fix it.
            </summary>
            <param name="data">string data</param>
            <returns>A fixed string</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianDate.ToPersianDateTime(System.DateTime,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Converts Gregorian date to Shamsi/Persian date
            </summary>
            <param name="gregorianDate">Gregorian date</param>
            <param name="dateSeparator">Defines an optional separator between date's parts. Its default value is /</param>
            <param name="includeHourMinute">Should converter include hour and minutes in final result. Its default value is true</param>
            <param name="showLeftAlignedHourMinute">If includeHourMinute is true, indicates whether to show hh:mm yyyy/mm/dd or yyyy/mm/dd hh:mm</param>
            <param name="timeSeparator">Defines an optional separator between time's parts. Its default value is :</param>
            <returns>Persian/Shamsi DateTime string</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianDate.Find1StDayOfMonth(System.Int32,System.Int32,PdfRpt.Calendar.CalendarType)">
            <summary>
            Finds 1st day of the given year and month.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianDate.HijriToGregorian(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts Hijri date To Gregorian date.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PersianDate.IsLeapYear(System.Int32,PdfRpt.Calendar.CalendarType)">
            <summary>
            Is a given year leap?
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.CellDataExt">
            <summary>
            PdfCellData class extensions
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.CellDataExt.GetValueOf``1(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32)">
            <summary>
            Gets the PropertyValue of an item in list of PdfCellData, which its PropertyName is specified by property expression.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="tableRowData">List of PdfCellData items</param>
            <param name="property">A property to find</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <param name="propertyIndex">Index of the property in data source, in case of duplicate properties</param> 
            <returns>It returns null if nothing has found in the list.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CellDataExt.GetValueOf(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.String,System.Object,System.Int32)">
            <summary>
            Gets the PropertyValue of an item in list of PdfCellData.
            Please note that property names are case sensitive.
            </summary>
            <param name="tableRowData">List of PdfCellData items</param>
            <param name="property">A property to find</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <param name="propertyIndex">Index of the property in data source, in case of duplicate properties</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CellDataExt.GetSafeStringValueOf``1(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String,System.Int32)">
            <summary>
            Gets the PropertyValue of an item in list of PdfCellData, which its PropertyName is specified by property expression.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="tableRowData">List of PdfCellData items</param>
            <param name="property">A property to find</param>
            <param name="format">An optional format of the expected object.</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <param name="propertyIndex">Index of the property in data source, in case of duplicate properties</param>
            <returns>It returns string.Empty if nothing has found in the list.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CellDataExt.GetSafeStringValueOf(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the PropertyValue of an item in list of PdfCellData, which its PropertyName is specified by property value.
            Please note that property names are case sensitive.
            </summary>
            <param name="tableRowData">List of PdfCellData items</param>
            <param name="property">A property to find</param>
            <param name="format">An optional format of the expected object.</param>
            <param name="nullValue">An optional nullValue of the expected object.</param>
            <param name="propertyIndex">Index of the property in data source, in case of duplicate properties</param>
            <returns>It returns string.Empty if nothing has found in the list.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CellDataExt.SetValueOf(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.String,System.Object,System.Int32)">
            <summary>
            Sets the PropertyValue of an item in list of PdfCellData.
            Please note that property names are case sensitive.
            </summary>
            <param name="tableRowData">List of PdfCellData items</param>
            <param name="property">A property to find</param>
            <param name="value">a value to set</param>
            <param name="propertyIndex">Index of the property in data source, in case of duplicate properties</param>
        </member>
        <member name="T:PdfRpt.Core.Helper.PropertyHelper">
            <summary>
            Get the string name and type of a property or field. Eg <c>string name = Property.Name&lt;string&gt;(x =&gt; x.Length);</c>
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.Name``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the type for the specified entity property or field. Eg <c>string name = Property.Name&lt;string&gt;(x =&gt; x.Length);</c>
            </summary>
            <typeparam name="TEntity">The type of the entity (interface or class).</typeparam>
            <param name="expression">The expression returning the entity property, in the form x =&gt; x.Id</param>
            <returns>The name of the property as a string</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.Type``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the type for the specified entity property or field. Eg Type&lt;string&gt;(x =&gt; x.Length) == typeof(int)
            </summary>
            <typeparam name="TEntity">The type of the entity (interface or class).</typeparam>
            <param name="expression">The expression returning the entity property, in the form x =&gt; x.Id</param>
            <returns>A type.</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.GetMemberExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Converts an Expression to a MemberExpression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.GetNestedPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts a nested property (eg. Studies.ID or Studies.Class.Name) to string
            </summary>
            <param name="expression">LambdaExpression</param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.IsNumericType(System.Type)">
            <summary>        
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="M:PdfRpt.Core.Helper.PropertyHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets value of a property, including enum's string description and NullDisplayTextAttribute.
            </summary>
            <param name="propertyInfo">property info</param>
            <param name="instance">object's instance</param>
            <returns>value of the property</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.CompilerType">
            <summary>
            Compiler type
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.CompilerType.CSharp">
            <summary>
            C# language
            </summary>
        </member>
        <member name="F:PdfRpt.Core.Helper.CompilerType.VB">
            <summary>
            VB.NET language
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.CompileAsIPdfReportData">
            <summary>
            Using C#/VB.NET compiler as a service to compile string data (SourceCode) as IPdfReportData
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.DynamicCompileAs``1">
            <summary>
            Compiles SourceCode dynamically by using C#/VB.NET compiler as a service
            </summary>
            <typeparam name="T">Type of the returned instance</typeparam>
            <returns>An instance of T</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.DynamicCompile">
            <summary>
            Compiles SourceCode dynamically by using C#/VB.NET compiler as a service
            </summary>
            <returns>An instance of the class name</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.DynamicCompileAsIPdfReportData">
            <summary>
            Compiles SourceCode dynamically by using C#/VB.NET compiler as a service
            </summary>
            <returns>An instance of IPdfReportData</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.Dispose">
            <summary>
            Free compiler provider
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.CompileAsIPdfReportData.Dispose(System.Boolean)">
            <summary>
            Free compiler provider
            </summary>
            <param name="disposeManagedResources">Indicates disposing managed resources</param>
        </member>
        <member name="P:PdfRpt.Core.Helper.CompileAsIPdfReportData.CompilerType">
            <summary>
            Compiler type, C# or VB.NET
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.CompileAsIPdfReportData.CompilerVersion">
            <summary>
            Compiler version, v3.5, v4.0 etc.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.CompileAsIPdfReportData.FullyQualifiedClassName">
            <summary>
            A case-sensitive name to locate the specified type from this assembly and create an instance of it.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.CompileAsIPdfReportData.ReferencedAssemblies">
            <summary>
            Sets the assembly names that are referenced by the source to compile.
            System.dll, System.Data.dll, System.XML.dll, System.Windows.Forms.dll, System.Drawing.dll, System.Core.dll are pre referenced assemblies here.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Helper.CompileAsIPdfReportData.SourceCode">
            <summary>
            Text content/source code which should be compiled dynamically
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.FuncHelper">
            <summary>
            Formula properties helpers
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.FuncHelper.ApplyCalculatedFieldFormula(System.Func{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Object},System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData})">
            <summary>
            Applies CalculatedFieldFormula safely.
            It returns string.Empty if tableRowData or formula are null.
            </summary>
            <param name="formula">A formula to apply</param>
            <param name="tableRowData">Passed data</param>
            <returns>Invoked formula</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.FuncHelper.ApplyFormula(System.Func{System.Object,System.String},System.Object)">
            <summary>
            Applies formula safely.
            It returns string.Empty if data or formula are null.
            </summary>
            <param name="formula">A formula to apply</param>
            <param name="data">Passed data</param>
            <returns>Invoked formula</returns>
        </member>
        <member name="T:PdfRpt.Core.Helper.PdfImageHelper">
            <summary>
            iTextSharp.text.Image class utilities
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfImageHelper.GetBarcodeImage(iTextSharp.text.pdf.Barcode,System.String,iTextSharp.text.pdf.PdfContentByte)">
            <summary>
            Converts the barcodeText to a barcode image and then returns an instance of iTextSharp.text.Image
            </summary>
            <param name="barcode">Barcode type defined in the iTextSharp.text.pdf namespace</param>
            <param name="barcodeText">Text to convert</param>
            <param name="cb">Canvas</param>
            <returns>A barcode image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfImageHelper.GetITextSharpImageFromImageFile(System.String,System.Boolean)">
            <summary>
            Gets an image's file path and returns an instance of iTextSharp.text.Image
            </summary>
            <param name="imageFilePath">Image's file path</param>
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
            <returns>An instance of iTextSharp.text.Image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfImageHelper.GetITextSharpImageFromByteArray(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes/blobs of an image file to an instance of iTextSharp.text.Image
            </summary>
            <param name="data">blob data</param>
            <param name="cacheImages">If true, the image bytes will be added to the PDF only once, not per each new instance. Therefore the result won't be a bloated PDF file. Choose this option if there are many similar images in your data source.</param>
            <returns>An instance of iTextSharp.text.Image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfImageHelper.GetITextSharpImageFromPdfTemplate(iTextSharp.text.pdf.PdfWriter,System.String,System.Int32)">
            <summary>
            Converts the selected page number of an existing pdf template file to an instance of iTextSharp.text.Image
            </summary>
            <param name="pdfWriter">PdfWriter object</param>
            <param name="pdfTemplateFilePath">pdf file path</param>
            <param name="pageNumber">selected page number of an existing pdf template file</param>
            <returns>An instance of iTextSharp.text.Image</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.PdfImageHelper.GetITextSharpImageFromAcroForm(iTextSharp.text.pdf.PdfWriter,System.String,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Action{System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},iTextSharp.text.pdf.AcroFields,iTextSharp.text.pdf.PdfStamper},System.Collections.Generic.IList{iTextSharp.text.Font},System.Int32)">
            <summary>
            Fills an AcroForm automatically and then Converts the selected page number of an existing pdf template file to an instance of iTextSharp.text.Image
            </summary>
            <param name="pdfWriter">PdfWriter object</param>
            <param name="pdfTemplateFilePath">pdf file path</param>
            <param name="data">Row's data</param>
            <param name="onFillAcroForm">FillAcroForm Formula</param>
            <param name="fonts">Controls fonts</param>
            <param name="pageNumber">selected page number of an existing pdf template file</param>
            <returns>An instance of iTextSharp.text.Image</returns>
        </member>
        <member name="T:PdfRpt.DataSources.SqlParametersParser">
            <summary>
            A class to parse defined parameters in sql statements automatically.
            </summary>
        </member>
        <member name="M:PdfRpt.DataSources.SqlParametersParser.ApplySafeParameters(System.Data.Common.DbCommand,System.String,System.Object[])">
            <summary>
            Parsing defined parameters in sql statements and converting them to DbParameters automatically
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="sqlWithAtSignParameters">sql statement with parameters started with @</param>
            <param name="parametersValues">parameter(s) value(s)</param>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.MainTableCellsEvent">
            <summary>
            This class allows accessing cell's canvas after finishing its rendering to add additional text or graphics.
            At this point we can add summary cells data.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.MainTableCellsEvent.#ctor(PdfRpt.Core.Contracts.CellAttributes)">
            <summary>
            Allows accessing cell's canvas after finishing its rendering to add additional text or graphics
            </summary>
            <param name="pdfRptCell">Related cell's attributes</param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.MainTableCellsEvent.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            <summary>
            This method is called at the end of the cell's rendering.
            </summary>
            <param name="cell">The current cell</param>
            <param name="position">The coordinates of the cell</param>
            <param name="canvases">An array of PdfContentByte to add text or graphics</param>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.MainTableCellsEvent.CellType">
            <summary>
            Represents a main table's cell type.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.MainTableCellsEvent.SharedData">
            <summary>
            Holds shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.MainTableCellsEvent.SummaryCellsData">
            <summary>
            List of the SummaryCells Data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.MainTableCellsEvent.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.MainTableCellsEvent.IsGroupingEnabled">
            <summary>
            Indicates grouping is enabled or not
            </summary>
        </member>
        <member name="T:PdfRpt.HeaderTemplates.InlineHeaderProvider">
            <summary>
            Defines dynamic headers for pages and individual groups.
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.InlineHeaderProvider.RenderingGroupHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new groups is being created.
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.InlineHeaderProvider.RenderingReportHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new page is being added.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.InlineHeaderProvider.AddGroupHeader">
            <summary>
            Returns dynamic content of the group header.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.InlineHeaderProvider.AddPageHeader">
            <summary>
            Returns dynamic content of the page header.
            </summary>
        </member>
        <member name="T:PdfRpt.HeaderTemplates.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt.HeaderTemplates"/> namespace contains built-in header templates.
            </summary>
        </member>
        <member name="T:PdfRpt.HeaderTemplates.XHtmlHeaderProvider">
            <summary>
            Defines dynamic headers for pages and individual groups by using iTextSharp's HTML to PDF capabilities (XmlWorker class).
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.RenderingGroupHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new groups is being created.
            </summary>
        </member>
        <member name="M:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.RenderingReportHeader(iTextSharp.text.Document,iTextSharp.text.pdf.PdfWriter,System.Collections.Generic.IList{PdfRpt.Core.Contracts.SummaryCellData})">
            <summary>
            Fires when a new page is being added.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.PageHeaderProperties">
            <summary>
            Properties of page headers.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.GroupHeaderProperties">
            <summary>
            Properties of group headers.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.AddGroupHeader">
            <summary>
            Returns dynamic HTML content of the group header.
            </summary>
        </member>
        <member name="P:PdfRpt.HeaderTemplates.XHtmlHeaderProvider.AddPageHeader">
            <summary>
            Returns dynamic HTML content of the page header.
            </summary>
        </member>
        <member name="T:PdfRpt.NamespaceDoc">
            <summary>
            The <see cref="N:PdfRpt"/> namespace contains main classes of PdfRpt.
            </summary>
        </member>
        <member name="T:PdfRpt.PdfReportDocument">
            <summary>
            PDF report generator class
            </summary>
        </member>
        <member name="M:PdfRpt.PdfReportDocument.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:PdfRpt.PdfReportDocument.GeneratePdf(System.Boolean)">
            <summary>
            Start generating the report based on the PdfRptData 
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.FlushInBrowser">
            <summary>
            It's designed for the ASP.NET Applications.
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.FlushType">
            <summary>
            How to flush an in memory PDF file.
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.ColumnSummaryCellsData">
            <summary>
            Summary cells data of the main table's columns
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.LastRenderedRowData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.PdfDoc">
            <summary>
            PDF Document object
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.PdfRptData">
            <summary>
            Reports' definition data
            </summary>
        </member>
        <member name="P:PdfRpt.PdfReportDocument.PdfWriter">
            <summary>
            PdfWriter object
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Helper.TableHelper">
            <summary>
            PdfGrid helper class
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.AddBorderToTable(PdfRpt.Core.Contracts.PdfGrid,iTextSharp.text.BaseColor,System.Single)">
            <summary>
            Adds a border to an existing PdfGrid
            </summary>
            <param name="table">Table</param>
            <param name="borderColor">Border's color</param>
            <param name="spacingBefore">Spacing before the table</param>
            <returns>A new PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.AddBorderToTable(PdfRpt.Core.Contracts.PdfGrid)">
            <summary>
            Adds a border to an existing PdfGrid
            </summary>
            <param name="table">table</param>
            <returns>A new PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.AddSummaryRow(PdfRpt.Core.Contracts.PdfGrid,System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes},System.String,System.String,PdfRpt.Core.Contracts.CellAttributes,PdfRpt.Core.Contracts.CellAttributes,PdfRpt.Core.Contracts.CellAttributes,PdfRpt.Core.Contracts.IColumnItemsTemplate)">
            <summary>
            Adds a SummaryRow to an existing PdfGrid
            </summary>
            <param name="table">An existing PdfGrid</param>
            <param name="pdfColumnsDefinitions">List of the PdfColumnAttributes</param>
            <param name="summaryProperty">Sets the location of summary cell's data</param>
            <param name="labelProperty">Sets the location of summary cell's label</param>
            <param name="summaryCell">SummaryCell's Attributes</param>
            <param name="labelCell">LabelCell's Attributes</param>
            <param name="emptyCell">The other not in use cell's Attributes</param>
            <param name="itemsTemplate">Default ItemsTemplate</param>         
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.AddSimpleRow(PdfRpt.Core.Contracts.PdfGrid,System.Action{PdfRpt.Core.Contracts.CellRowData,PdfRpt.Core.Contracts.CellBasicProperties}[])">
            <summary>
            Adds a new row to the specified table.
            The default IColumnItemsTemplate would be TextBlockField.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.CloneMainTableStructure(PdfRpt.Core.Contracts.DocumentPreferences,System.Collections.Generic.IList{PdfRpt.Core.Contracts.ColumnAttributes})">
            <summary>
            To add manual AddSummaryRows, we need to create a clone of the MainTable's structure.
            </summary>
            <param name="pageSetup">Document settings</param>
            <param name="pdfColumnsDefinitions">List of the PdfColumnAttributes</param>
            <returns>A PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.CreateEmptyRowTable(System.String,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new PdfGrid with one column and row.
            </summary>
            <param name="phrase">An optional phrase to display</param>
            <param name="widthPercentage">Width of the table</param>
            <param name="fixedHeight">Height of the table</param>
            <param name="border">Border width</param>
            <returns>A PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.SimpleTable(System.Int32,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellAttributes},System.Boolean)">
            <summary>
            Creates a simple PdfGrid.
            </summary>
            <param name="columnsNumber">number of columns</param>
            <param name="pdfCellAttributesList">PdfCells Attributes List</param>
            <param name="showBorder">Indicates visibility of the table's border</param>
            <returns>A PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.SimpleTable(System.Int32,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellAttributes})">
            <summary>
            Creates a simple PdfGrid.
            </summary>
            <param name="columnsNumber">number of columns</param>
            <param name="pdfCellAttributesList">PdfCells Attributes List</param>        
            <returns>A PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.SimpleTable(System.Int32,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellAttributes},iTextSharp.text.BaseColor,System.Boolean)">
            <summary>
            Creates a simple PdfGrid.
            </summary>
            <param name="columnsNumber">Number of columns</param>
            <param name="pdfCellAttributesList">PdfCells Attributes List</param>
            <param name="nullRowBackgroundColor">You can set the cells attributes to null. nullRowBackgroundColor indicates background color of these cells. Default color is white here.</param>
            <param name="showBorder">Indicates visibility of the table's border</param>
            <returns>A PdfGrid</returns>
        </member>
        <member name="M:PdfRpt.Core.Helper.TableHelper.AddDefaultEmptyDataSourceTable(iTextSharp.text.Document,PdfRpt.Core.Contracts.IPdfFont,System.Nullable{PdfRpt.Core.Contracts.PdfRunDirection},System.String)">
            <summary>
            It will be used for OnDataSourceIsEmptyEvent.
            </summary>
            <param name="pdfDoc">Pdf document object</param>
            <param name="pdfRptFont">fonts</param>
            <param name="runDirection">A possible run direction value, left-to-right or right-to-left</param>         
            <param name="message">a message to show</param>
            <returns>PdfGrid</returns>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.PageEvents">
            <summary>
            Allows catching several document events.
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.PageEvents.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Fires when the document is closed.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.PageEvents.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Fires when a page is finished, just before being written to the document.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.PageEvents.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Fires when the document is opened.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.PageEvents.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
            <summary>
            Fires when a page is initialized.
            </summary>
            <param name="writer">PdfWriter</param>
            <param name="document">PDF Document</param>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.ColumnSummaryCellsData">
            <summary>
            Rows summaries data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.CurrentRowInfoData">
            <summary>
            Stores the last rendered row's data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.MainTableEvents">
            <summary>
            Main table's cells and rows events
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.PageSetup">
            <summary>
            Document settings
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.PdfColumnsAttributes">
            <summary>
            Defining which properties of MainTableDataSource should be rendered and how.
            If you don't set it, list of the main table's columns will be extracted from MainTableDataSource automatically.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.PdfFont">
            <summary>
            Pdf document's font
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.PdfRptFooter">
            <summary>
            Optional custom footer of the pages.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.PageEvents.PdfRptHeader">
            <summary>
            Optional custom header of the pages.
            </summary>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.RenderMainTable">
            <summary>
            Renders MainTable's Rows
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.RenderMainTable.AddToDocument">
            <summary>
            Starts rendering of the MainTable
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RenderMainTable.ColumnSummaryCellsData">
            <summary>
            List of the summaries data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RenderMainTable.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RenderMainTable.PdfDoc">
            <summary>
            Pdf Document object
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RenderMainTable.PdfRptData">
            <summary>
            Main interface of PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.RenderMainTable.PdfWriter">
            <summary>
            PdfWriter object
            </summary>
        </member>
        <member name="T:PdfRpt.Core.PdfTable.TableCellHelper">
            <summary>
            Helps rendering of the main table's cells
            </summary>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddGeneralCell(iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Object,System.Int32,PdfRpt.Core.Contracts.RowType,PdfRpt.Core.Contracts.CellType,System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},PdfRpt.Core.Contracts.HorizontalAlignment,PdfRpt.Core.Contracts.DocumentFontStyle,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adds a new PdfPCell to the MainTable
            </summary>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>        
            <param name="rawData"></param>
            <param name="columnNumber"></param>
            <param name="pdfRowType"></param>
            <param name="pdfCellType"></param>
            <param name="rowValues"></param>
            <param name="horizontalAlignment"></param>
            <param name="pdfFontStyle"></param>
            <param name="rotation"></param>
            <param name="setItemTemplate"></param>
            <param name="colSpan"></param>         
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddHeaderCell(System.Int32,System.Int32)">
            <summary>
            Adds a new header PdfPCell to the MainTable
            </summary>
            <param name="columnNumber"></param>
            <param name="colSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddExtraHeaderCell(System.Int32,System.Int32,PdfRpt.Core.Contracts.HeadingCell)">
            <summary>
            Adds a new extra header PdfPCell to the MainTable
            </summary>
            <param name="columnNumber"></param>
            <param name="colSpan"></param>
            <param name="pdfHeadingCell"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddPreviousPageSummaryCell(iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Int32)">
            <summary>
            Adds a new PreviousPageSummary PdfPCell to the MainTable
            </summary>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddRowCell(System.Collections.Generic.IList{PdfRpt.Core.Contracts.CellData},iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Int32)">
            <summary>
            Adds a new data PdfPCell to the MainTable
            </summary>
            <param name="rowValues"></param>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>
            <param name="columnNumber"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddRowNumberCell(iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Int32)">
            <summary>
            Adds a new row number PdfPCell to the MainTable
            </summary>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddSummaryCell(iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Int32,PdfRpt.Core.Contracts.CellType,PdfRpt.Core.Contracts.RowType)">
            <summary>
            Adds a new Summary PdfPCell to the MainTable
            </summary>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>
            <param name="columnNumber"></param>
            <param name="pdfCellType"></param>
            <param name="pdfRowType"></param>
            <returns></returns>
        </member>
        <member name="M:PdfRpt.Core.PdfTable.TableCellHelper.AddSummaryCell(iTextSharp.text.BaseColor,iTextSharp.text.BaseColor,System.Object,System.Int32,PdfRpt.Core.Contracts.RowType,PdfRpt.Core.Contracts.CellType)">
            <summary>
            Adds a new Summary PdfPCell to the MainTable
            </summary>
            <param name="backgroundColor"></param>
            <param name="foreColor"></param>        
            <param name="rawData"></param>
            <param name="columnNumber"></param>
            <param name="pdfRowType"></param>
            <param name="pdfCellType"></param>
            <returns></returns>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TableCellHelper.SharedData">
            <summary>
            Holds shared info between rendering classes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TableCellHelper.CurrentRowInfoData">
            <summary>
            Holds last result of the actual rendering engine of iTextSharp during its processes.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TableCellHelper.MainTable">
            <summary>
            MainTable of the PdfRpt
            </summary>
        </member>
        <member name="P:PdfRpt.Core.PdfTable.TableCellHelper.ShowAllGroupsSummaryRow">
            <summary>
            Indicates visibility of the groups SummaryRows
            </summary>
        </member>
        <member name="T:PdfRpt.Core.Contracts.SummaryCellData">
            <summary>
            A class to hold summary info of the main table's rows and cells.
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.OverallRowNumber">
            <summary>
            Row number of the current row without considering the presence of the different groups
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.GroupRowNumber">
            <summary>
            Row number of the current row in its group
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.GroupNumber">
            <summary>
            Current row's group number
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.CellData">
            <summary>
            Current cell's raw data
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.OverallAggregateValue">
            <summary>
            Aggregate value of the current row and cell without considering the presence of the different groups
            </summary>
        </member>
        <member name="P:PdfRpt.Core.Contracts.SummaryCellData.GroupAggregateValue">
            <summary>
            Aggregate value of the current row and cell in its group
            </summary>
        </member>
        <member name="T:PdfRpt.BasicTemplateProvider">
             <summary>
            A set of a predefined main table's templates.
             </summary>
        </member>
        <member name="M:PdfRpt.BasicTemplateProvider.#ctor(PdfRpt.Core.Contracts.BasicTemplate)">
            <summary>
            Main table's template selector
            </summary>
            <param name="basicTemplate">template's name</param>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.AlternatingRowBackgroundColor">
            <summary>
            Alternating rows background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.AlternatingRowFontColor">
            <summary>
            Alternating rows font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.CellBorderColor">
            <summary>
            Cells border color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.HeaderBackgroundColor">
            <summary>
            Main table's header background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.HeaderFontColor">
            <summary>
            Main table's headers font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.PageSummaryRowBackgroundColor">
            <summary>
            Pages summary row background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.PageSummaryRowFontColor">
            <summary>
            Pages summary rows font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.PreviousPageSummaryRowBackgroundColor">
            <summary>
            Remaining rows background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.PreviousPageSummaryRowFontColor">
            <summary>
            Remaining rows font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.RowBackgroundColor">
            <summary>
            Summary rows background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.RowFontColor">
            <summary>
            Summary rows font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.ShowGridLines">
            <summary>
            Sets visibility of the main table's grid lines
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.SummaryRowBackgroundColor">
            <summary>
            Summary rows background color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.SummaryRowFontColor">
            <summary>
            Summary rows font color value
            </summary>
        </member>
        <member name="P:PdfRpt.BasicTemplateProvider.HeaderHorizontalAlignment">
            <summary>
            Header's caption horizontal alignment
            </summary>
        </member>
        <member name="T:PdfRpt.VectorCharts.IVectorChart">
            <summary>
            VectorChart's template.
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.IVectorChart.Draw">
            <summary>
            This method returns a vector image which can be painted on a table's cell or part of a page.
            </summary>
            <returns>An instance of iTextSharp.text.pdf.Image</returns>
        </member>
        <member name="T:PdfRpt.VectorCharts.BarChartItem">
            <summary>
            BarChartItem
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.BarChartItem.#ctor">
            <summary>
            BarChartItem
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.BarChartItem.#ctor(System.Double,System.String,iTextSharp.text.BaseColor)">
            <summary>
            BarChartItem
            </summary>
            <param name="value">Value of the chart's item.</param>
            <param name="label">Label of the item.</param>
            <param name="color">Color of the item.</param>
        </member>
        <member name="M:PdfRpt.VectorCharts.BarChartItem.#ctor(System.Double,System.String,System.Drawing.Color)">
            <summary>
            BarChartItem
            </summary>
            <param name="value">Value of the chart's item.</param>
            <param name="label">Label of the item.</param>
            <param name="color">Color of the item.</param>
        </member>
        <member name="P:PdfRpt.VectorCharts.BarChartItem.Value">
            <summary>
            Value of the chart's item.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.BarChartItem.Label">
            <summary>
            Label of the item.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.BarChartItem.Color">
            <summary>
            Color of the item.
            </summary>
        </member>
        <member name="T:PdfRpt.VectorCharts.HorizontalBarChart">
            <summary>
            Draws a Horizontal BarChart.
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.HorizontalBarChart.#ctor">
            <summary>
            Horizontal BarChart
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.HorizontalBarChart.Draw">
            <summary>
            Draws a Horizontal BarChart.
            This method returns a vector image which can be painted on a table's cell or part of a page.
            </summary>
            <returns>An instance of iTextSharp.text.pdf.Image</returns>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.AxisLineColor">
            <summary>
            Its default value is BaseColor.YELLOW
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.AxisLineWidth">
            <summary>
            Its default value is 1.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.BackgroundColor">
            <summary>
            BarChart's area background color. Its default value is BaseColor.GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.BarWidth">
            <summary>
            Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.BorderColor">
            <summary>
            BarChart's area border color. Its default value is BaseColor.DARK_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.ChartWidth">
            <summary>
            Its default value is 300.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.ContentByte">
            <summary>
            Drawing canvas
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.Direction">
            <summary>
            RTL or LTR. Its default value is LTR.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.HorizontalBarBorderColor">
            <summary>
            Its default value is BaseColor.DARK_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.HorizontalBarBorderLineWidth">
            <summary>
            Its default value is 0.4f
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.HorizontalGridColor">
            <summary>
            Its default value is LightGray.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.HorizontalLineWidth">
            <summary>
            Its default value is 0.4f
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.Items">
            <summary>
            Segments of BarChart to draw.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.Margin">
            <summary>
            BarChart's Margin from the edges. Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.PdfFont">
            <summary>
            Labels font. Use GenericFontProvider class to initialize it.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.HorizontalBarChart.ScaleFactor">
            <summary>
            Set the scale factor for y-axis marker.
            Its default value is 10.
            </summary>
        </member>
        <member name="T:PdfRpt.VectorCharts.PieChart">
            <summary>
            Draws a PieChart.
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.PieChart.#ctor">
            <summary>
            PieChart
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.PieChart.Draw">
            <summary>
            Draws a PieChart.
            This method returns a vector image which can be painted on a table's cell or part of a page.
            </summary>
            <returns>An instance of iTextSharp.text.pdf.Image</returns>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.BackgroundColor">
            <summary>
            PieChart's area background color. Its default value is BaseColor.GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.BorderColor">
            <summary>
            PieChart's area border color. Its default value is BaseColor.DARK_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.BulletHeight">
            <summary>
            Label's bullet height. Its default value is 7.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.BulletWidth">
            <summary>
            Label's bullet width. Its default value is 7.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.ContentByte">
            <summary>
            Drawing canvas
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.Direction">
            <summary>
            RTL or LTR. Its default value is LTR.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.Margin">
            <summary>
            PieChart's Margin from the edges. Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.PdfFont">
            <summary>
            Labels font. Use GenericFontProvider class to initialize it.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.Radius">
            <summary>
            PieChart's Radius. Its default value is 50f.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChart.Segments">
            <summary>
            Segments of PieChart to draw.
            </summary>
        </member>
        <member name="T:PdfRpt.VectorCharts.PieChartSegment">
            <summary>
            Represents a PieChart's segment data
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.PieChartSegment.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.PieChartSegment.#ctor(System.Double,iTextSharp.text.BaseColor,System.String)">
            <summary>
            ctor.
            </summary>
            <param name="value">Value of the chart's segment.</param>        
            <param name="color">Color of the segment.</param>
            <param name="label">Label of the segment.</param>
        </member>
        <member name="M:PdfRpt.VectorCharts.PieChartSegment.#ctor(System.Double,System.Drawing.Color,System.String)">
            <summary>
            ctor.
            </summary>
            <param name="value">Value of the chart's segment.</param>
            <param name="color">Color of the segment.</param>
            <param name="label">Label of the segment.</param>        
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChartSegment.Value">
            <summary>
            Value of the chart's segment.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChartSegment.Label">
            <summary>
            Label of the segment.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChartSegment.Color">
            <summary>
            Color of the segment.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChartSegment.Angle">
            <summary>
            Segment's angle.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.PieChartSegment.Percentage">
            <summary>
            PieChart's Percentage
            </summary>
        </member>
        <member name="T:PdfRpt.VectorCharts.VerticalBarChart">
            <summary>
            Draws a Vertical BarChart.
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.VerticalBarChart.#ctor">
            <summary>
            Vertical BarChart
            </summary>
        </member>
        <member name="M:PdfRpt.VectorCharts.VerticalBarChart.Draw">
            <summary>
            Draws a Vertical BarChart.
            This method returns a vector image which can be painted on a table's cell or part of a page.
            </summary>
            <returns>An instance of iTextSharp.text.pdf.Image</returns>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.AxisLineColor">
            <summary>
            Its default value is BaseColor.YELLOW
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.AxisLineWidth">
            <summary>
            Its default value is 1.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.BackgroundColor">
            <summary>
            BarChart's area background color. Its default value is BaseColor.GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.BarWidth">
            <summary>
            Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.BorderColor">
            <summary>
            BarChart's area border color. Its default value is BaseColor.DARK_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.BottomMargin">
            <summary>
            Its default value is 50.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.ChartHeight">
            <summary>
            Its default value is 200.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.ContentByte">
            <summary>
            Drawing canvas
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.Direction">
            <summary>
            RTL or LTR. Its default value is LTR.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.HorizontalGridColor">
            <summary>
            Its default value is LightGray.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.HorizontalLineWidth">
            <summary>
            Its default value is 0.4f
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.Items">
            <summary>
            Segments of BarChart to draw.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.Margin">
            <summary>
            BarChart's Margin from the edges. Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.PdfFont">
            <summary>
            Labels font. Use GenericFontProvider class to initialize it.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.ScaleFactor">
            <summary>
            Set the scale factor for y-axis marker.
            Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.SpaceBetweenBars">
            <summary>
            Its default value is 10.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.VerticalBarBorderColor">
            <summary>
            Its default value is BaseColor.DARK_GRAY.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.VerticalBarBorderLineWidth">
            <summary>
            Its default value is 0.4f
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.XAxisLabelRotation">
            <summary>
            Its default value is -60. 
            After changing this value, you need to set XAxisLabelXLocationDelta and XAxisLabelYLocation too.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.XAxisLabelXLocationDelta">
            <summary>
            Its default value is 0.
            </summary>
        </member>
        <member name="P:PdfRpt.VectorCharts.VerticalBarChart.XAxisLabelYLocation">
            <summary>
            Its default value is (BottomMargin + Margin - 4).
            </summary>
        </member>
    </members>
</doc>
